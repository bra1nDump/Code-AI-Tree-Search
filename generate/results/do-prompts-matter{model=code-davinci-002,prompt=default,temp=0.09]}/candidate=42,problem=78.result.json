{
    "codes": [
        "\n# Solution\n\n# This solution is based on the idea that we can use dynamic programming to solve this problem.\n# We will use a 2D array to store the number of ways to reach a certain time with a certain genre.\n# The first dimension will be the time and the second dimension will be the genre.\n# We will use the following formula to calculate the number of ways to reach a certain time with a certain genre:\n# dp[time][genre] = dp[time - song_time][genre] + dp[time - song_time][genre - 1] + dp[time - song_time][genre + 1]\n# The first term is the number of ways to reach the current time with the current genre by using the current song.\n# The second term is the number of ways to reach the current time with the current genre by using the current song and a song of the previous genre.\n# The third term is the number of ways to reach the current time with the current genre by using the current song and a song of the next genre.\n# We will use the following base cases:\n# dp[0][1] = 1\n# dp[0][2] = 1\n# dp[0][3] = 1\n# The answer will be the sum of the number of ways to reach the total time with each genre.\n\n# Time complexity: O(n * T)\n# Space complexity: O(T)\n\nMOD = 10**9 + 7\n\ndef solve(n, T, songs):\n    dp = [[0 for _ in range(4)] for _ in range(T + 1)]\n    dp[0][1] = 1\n    dp[0][2] = 1\n    dp[0][3] = 1\n    for song_time, song_genre in songs:\n        for time in range(T, song_time - 1, -1):\n            dp[time][song_genre] = (dp[time][song_genre] + dp[time - song_time][song_genre]) % MOD\n            if song_genre > 1:\n                dp[time][song_genre] = (dp[time][song_genre] + dp[time - song_time][song_genre - 1]) % MOD\n            if song_genre < 3:\n                dp[time][song_genre] = (dp[time][song_genre] + dp[time - song_time][song_genre + 1]) % MOD\n    return sum(dp[T]) % MOD\n\nif True:\n    n, T = map(int, input().split())\n    songs = []\n    for _ in range(n):\n        song_time, song_genre = map(int, input().split())\n        songs.append((song_time, song_genre))\n    print(solve(n, T, songs))"
    ],
    "rewards": [
        0.4
    ],
    "train rewards": [
        0.35185185185185186
    ],
    "time": 17.69332981109619,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false
        ]
    ]
}