{
    "codes": [
        "\n# Solution\n\n# This solution is based on the idea that we can use dynamic programming to solve this problem.\n# We will use a 2D array to store the number of playlists that can be made with the first i songs and a total duration of j.\n# We will use the following recurrence relation to fill the array:\n# dp[i][j] = sum(dp[i-1][j-k]) for all k such that j-k >= 0 and k != t[i]\n# The base case is dp[0][0] = 1\n# The answer is dp[n][T]\n\n# Time complexity: O(n*T)\n# Space complexity: O(n*T)\n\nMOD = 10**9 + 7\n\ndef solve(n, T, t, g):\n    dp = [[0 for _ in range(T+1)] for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(T+1):\n            for k in range(j+1):\n                if k != t[i-1]:\n                    dp[i][j] += dp[i-1][j-k]\n                    dp[i][j] %= MOD\n    return dp[n][T]\n\nn, T = map(int, input().split())\nt = []\ng = []\nfor _ in range(n):\n    ti, gi = map(int, input().split())\n    t.append(ti)\n    g.append(gi)\nprint(solve(n, T, t, g))"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.07407407407407407
    ],
    "time": 7.396667003631592,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}