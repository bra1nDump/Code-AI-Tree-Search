{
    "codes": [
        "\nimport sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    songs = []\n    for i in range(n):\n        songs.append(list(map(int, sys.stdin.readline().split())))\n    songs.sort()\n    # print(songs)\n    # print(n, T)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs)\n    # print(songs"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.0
    ],
    "time": 16.649926900863647,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}