{
    "codes": [
        "\n# Solution\n\n# This solution is based on the idea that we can use dynamic programming to solve this problem.\n# We will use a 2D array to store the number of ways to reach a certain time with a certain genre.\n# We will use the following notation:\n# dp[i][j] = number of ways to reach time i with genre j\n# We will use the following recurrence relation:\n# dp[i][j] = sum(dp[i - t_k][k]) for all k != j\n# We will use the following base cases:\n# dp[0][j] = 1 for all j\n# dp[i][j] = 0 for all i < 0\n# dp[i][j] = 0 for all j < 0\n# dp[i][j] = 0 for all j > 3\n# We will use the following answer:\n# sum(dp[T][j]) for all j\n\n# Time complexity: O(n * T)\n# Space complexity: O(n * T)\n\n# Importing standard libraries\nimport sys\n\n# Parsing the input\nn, T = map(int, sys.stdin.readline().strip().split())\nt = []\ng = []\nfor i in range(n):\n    t_i, g_i = map(int, sys.stdin.readline().strip().split())\n    t.append(t_i)\n    g.append(g_i)\n\n# Defining the modulo\nMOD = 10**9 + 7\n\n# Defining the dp array\ndp = [[0 for j in range(4)] for i in range(T + 1)]\n\n# Defining the base cases\nfor j in range(4):\n    dp[0][j] = 1\n\n# Defining the recurrence relation\nfor i in range(1, T + 1):\n    for j in range(4):\n        for k in range(n):\n            if g[k] != j:\n                if i - t[k] >= 0:\n                    dp[i][j] += dp[i - t[k]][g[k]]\n                    dp[i][j] %= MOD\n\n# Defining the answer\nans = 0\nfor j in range(4):\n    ans += dp[T][j]\n    ans %= MOD\n\n# Printing the answer\nprint(ans)"
    ],
    "rewards": [
        0.12727272727272726
    ],
    "train rewards": [
        0.24074074074074073
    ],
    "time": 12.3215970993042,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}