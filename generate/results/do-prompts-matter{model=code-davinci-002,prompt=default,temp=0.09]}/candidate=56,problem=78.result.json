{
    "codes": [
        "\n# Solution\n\n# This solution is based on the idea that we can use dynamic programming to solve this problem.\n# We will use a 2D array to store the number of playlists that can be created with the first i songs\n# and with a total duration of j.\n\n# The recurrence relation is as follows:\n# dp[i][j] = dp[i-1][j] + dp[i-1][j-t[i]]\n# where t[i] is the duration of the ith song.\n\n# The first term in the recurrence relation is the number of playlists that can be created with the first i-1 songs\n# and with a total duration of j.\n\n# The second term in the recurrence relation is the number of playlists that can be created with the first i-1 songs\n# and with a total duration of j-t[i].\n\n# The second term is added because we can add the ith song to the end of the playlist.\n\n# The recurrence relation can be modified to take into account the constraint that two songs of the same genre\n# cannot be played consecutively.\n\n# The recurrence relation is as follows:\n# dp[i][j] = dp[i-1][j] + dp[i-1][j-t[i]] - dp[i-2][j-t[i]]\n# where t[i] is the duration of the ith song.\n\n# The second term in the recurrence relation is the number of playlists that can be created with the first i-1 songs\n# and with a total duration of j-t[i].\n\n# The third term in the recurrence relation is the number of playlists that can be created with the first i-2 songs\n# and with a total duration of j-t[i].\n\n# The third term is subtracted because we can add the ith song to the end of the playlist.\n# However, if the ith song has the same genre as the (i-1)th song, then we cannot add the ith song to the end of the playlist.\n# Thus, we subtract the number of playlists that can be created with the first i-2 songs and with a total duration of j-t[i].\n\n# The time complexity of this solution is O(n*T) where n is the number of songs and T is the total duration.\n# The space complexity of this solution is O(n*T).\n\n# The solution is implemented below.\n\n# Importing the required libraries.\nimport sys\n\n# Defining the modulus.\nmod = 10**9 + 7\n\n# Reading the input.\nn, T = map(int, input().split())\n\n# Creating the array to store the durations of the songs.\nt = [0] * (n + 1)\n\n# Creating the array to store the genres of the songs.\ng = [0] * (n + 1)\n\n# Creating the 2D array to store the number of playlists that can be created with the first i songs\n# and with a total duration of j.\ndp = [[0] * (T + 1) for _ in range(n + 1)]\n\n# Creating the 2D array to store the number of playlists that can be created with the first i songs\n# and with a total duration of j.\ndp2 = [[0] * (T + 1) for _ in range(n + 1)]\n\n# Creating the 2D array to store the number of playlists that can be created with the first i songs\n# and with a total duration of j.\ndp3 = [[0] * (T + 1) for _ in range(n + 1)]\n\n# Creating the 2D array to store the number of playlists that can be created with the first i songs\n# and with a total duration of j.\ndp4 = [[0] * (T + 1) for _ in range(n + 1)]\n\n# Creating the 2D array to store the number of playlists that can be created with the first i songs\n# and with a total duration of j.\ndp5 = [[0] * (T + 1) for _ in range(n + 1)]\n\n# Creating the 2D array to store the number of playlists that can be created with the first i songs\n# and with a total duration of j.\ndp6 = [[0] * (T + 1) for _ in range(n + 1)]\n\n# Creating the 2D array to store the number of playlists that can be created with the first i songs\n"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.0
    ],
    "time": 20.46909189224243,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}