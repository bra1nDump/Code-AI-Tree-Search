{
    "codes": [
        "\n# Solution\n\n# This solution is based on the idea that we can use dynamic programming to solve this problem.\n# We will use a 2D array to store the number of possible playlists for each duration and genre.\n# The first dimension will be the duration and the second dimension will be the genre.\n# We will use the following recurrence relation to fill the array:\n# dp[i][j] = sum(dp[i - t][k]) for all k != j\n# where i is the duration, j is the genre, t is the duration of the song, and k is the genre of the song.\n# The base case is when i = 0, in which case dp[0][j] = 1 for all j.\n# The answer will be the sum of all dp[T][j] for all j.\n\n# Time complexity: O(n * T * g)\n# Space complexity: O(n * T)\n\nMOD = 10**9 + 7\n\ndef solve(n, T, songs):\n    dp = [[0 for _ in range(4)] for _ in range(T + 1)]\n    for j in range(1, 4):\n        dp[0][j] = 1\n    for i in range(1, T + 1):\n        for j in range(1, 4):\n            for t, k in songs:\n                if i - t >= 0 and k != j:\n                    dp[i][j] += dp[i - t][k]\n                    dp[i][j] %= MOD\n    return sum(dp[T]) % MOD\n\nif True:\n    n, T = map(int, input().split())\n    songs = []\n    for _ in range(n):\n        t, g = map(int, input().split())\n        songs.append((t, g))\n    print(solve(n, T, songs))"
    ],
    "rewards": [
        0.12727272727272726
    ],
    "train rewards": [
        0.24074074074074073
    ],
    "time": 8.960669755935669,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}