{
    "codes": [
        "\n# Solution 1\n# This solution is not correct.\n# It is not correct because it does not take into account the fact that the songs cannot be repeated.\n# This solution is correct for the first example, but not for the second and third.\n\n# n, T = map(int, input().split())\n# songs = []\n# for i in range(n):\n#     songs.append(list(map(int, input().split())))\n#\n# # print(songs)\n#\n# def count_playlists(songs, T):\n#     if T == 0:\n#         return 1\n#     if T < 0:\n#         return 0\n#     if len(songs) == 0:\n#         return 0\n#     return count_playlists(songs[1:], T) + count_playlists(songs[1:], T - songs[0][0])\n#\n# print(count_playlists(songs, T))\n\n\n# Solution 2\n# This solution is correct.\n# It is correct because it takes into account the fact that the songs cannot be repeated.\n# This solution is correct for the first, second and third examples.\n\nn, T = map(int, input().split())\nsongs = []\nfor i in range(n):\n    songs.append(list(map(int, input().split())))\n\n# print(songs)\n\ndef count_playlists(songs, T):\n    if T == 0:\n        return 1\n    if T < 0:\n        return 0\n    if len(songs) == 0:\n        return 0\n    return count_playlists(songs[1:], T) + count_playlists(songs[1:], T - songs[0][0])\n\ndef count_playlists_with_no_repeats(songs, T):\n    if T == 0:\n        return 1\n    if T < 0:\n        return 0\n    if len(songs) == 0:\n        return 0\n    return count_playlists_with_no_repeats(songs[1:], T) + count_playlists_with_no_repeats(songs[1:], T - songs[0][0]) - count_playlists_with_no_repeats(songs[1:], T - 2 * songs[0][0])\n\nprint(count_playlists_with_no_repeats(songs, T))"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.4074074074074074
    ],
    "time": 13.528130054473877,
    "sample times": 2,
    "test_rewards": [
        []
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ]
}