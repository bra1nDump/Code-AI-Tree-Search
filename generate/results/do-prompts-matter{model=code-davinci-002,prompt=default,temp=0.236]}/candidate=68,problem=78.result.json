{
    "codes": [
        "\n# Solution 1\n\nimport sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    durations = []\n    genres = []\n    for i in range(n):\n        t, g = map(int, sys.stdin.readline().split())\n        durations.append(t)\n        genres.append(g)\n    dp = [[[0 for k in range(T+1)] for j in range(4)] for i in range(n+1)]\n    dp[0][0][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, 4):\n            for k in range(T+1):\n                if k >= durations[i-1]:\n                    dp[i][j][k] = dp[i-1][j][k] + dp[i-1][j-1][k-durations[i-1]]\n                else:\n                    dp[i][j][k] = dp[i-1][j][k]\n    print(dp[n][3][T])\n\nif True:\n    main()"
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 6.7671051025390625,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}