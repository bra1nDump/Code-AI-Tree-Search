{
    "codes": [
        "\n# Solution 1\n#\n# def solve(n, T, songs):\n#     # dp[i][j] = number of ways to make a playlist of length j using the first i songs\n#     dp = [[0 for _ in range(T + 1)] for _ in range(n + 1)]\n#\n#     # base case: dp[0][0] = 1\n#     dp[0][0] = 1\n#\n#     for i in range(1, n + 1):\n#         for j in range(1, T + 1):\n#             # if the song is too long, we can't use it\n#             if j < songs[i - 1][0]:\n#                 dp[i][j] = dp[i - 1][j]\n#             else:\n#                 # we can either use the song or not use it\n#                 dp[i][j] = dp[i - 1][j] + dp[i - 1][j - songs[i - 1][0]]\n#\n#     return dp[n][T]\n#\n#\n# n, T = map(int, input().split())\n# songs = []\n# for _ in range(n):\n#     songs.append(tuple(map(int, input().split())))\n#\n# print(solve(n, T, songs))\n\n# Solution 2\n#\n# def solve(n, T, songs):\n#     # dp[i][j] = number of ways to make a playlist of length j using the first i songs\n#     dp = [[0 for _ in range(T + 1)] for _ in range(n + 1)]\n#\n#     # base case: dp[0][0] = 1\n#     dp[0][0] = 1\n#\n#     for i in range(1, n + 1):\n#         for j in range(1, T + 1):\n#             # if the song is too long, we can't use it\n#             if j < songs[i - 1][0]:\n#                 dp[i][j] = dp[i - 1][j]\n#             else:\n#                 # we can either use the song or not use it\n#                 dp[i][j] = dp[i - 1][j] + dp[i - 1][j - songs[i - 1][0]]\n#\n#     return dp[n][T]\n#\n#\n# n, T = map(int, input().split())\n# songs = []\n# for _ in range(n):\n#     songs.append(tuple(map(int, input().split())))\n#\n# print(solve(n, T, songs))\n\n# Solution 3\n#\n# def solve(n, T, songs):\n#     # dp[i][j] = number of ways to make a playlist of length j using the first i songs\n#     dp = [[0 for _ in range(T + 1)] for _ in range(n + 1)]\n#\n#     # base case: dp[0][0] = 1\n#     dp[0][0] = 1\n#\n#     for i in range(1, n + 1):\n#         for j in range(1, T + 1):\n#             # if the song is too long, we can't use it\n#             if j < songs[i - 1][0]:\n#                 dp[i][j] = dp[i - 1][j]\n#             else:\n#                 # we can either use the song or not use it\n#                 dp[i][j] = dp[i - 1][j] + dp[i - 1][j - songs[i - 1][0]]\n#\n#     return dp[n][T]\n#\n#\n# n, T = map(int, input().split())\n# songs = []\n# for _ in range(n):\n#     songs.append(tuple(map(int, input().split())))\n#\n# print(solve(n, T, songs))\n\n# Solution 4\n#\n# def solve(n, T, songs):\n#     # dp[i][j] = number of ways to make a playlist of length j using the first i songs\n#     dp = [[0 for _ in range(T + 1)] for _ in range(n + 1)]\n#"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.0
    ],
    "time": 23.48764991760254,
    "sample times": 2,
    "test_rewards": [
        []
    ],
    "train_rewards": [
        []
    ]
}