{
    "codes": [
        "\n# Solution\n\n# Python 3 program to count number of ways \n# to play a playlist of songs \n\n# modulo value \nmod = 1000000007\n\n# dp[i][j] is going to store count of playlist \n# of length i with last song genre j. \ndp = [[0 for i in range(4)] \n\t\tfor i in range(16)] \n\n# Function to count number of playlist of length \n# n with last song genre j. \ndef countplaylist(n, j): \n\n\t# If we have reached end of playlist. \n\tif (n == 0): \n\t\treturn 1\n\n\t# If value is already computed. \n\tif (dp[n][j] != 0): \n\t\treturn dp[n][j] \n\n\tans = 0\n\n\t# Recur for all possible previous \n\t# song genres. \n\tfor i in range(1, 4): \n\n\t\t# If two consecutive songs have \n\t\t# same genre then ignore. \n\t\tif (i != j): \n\t\t\tans = (ans + countplaylist(n - 1, i)) \n\n\t# Store result and return it. \n\tdp[n][j] = ans \n\treturn ans \n\n# Driver Code \nn = 3\nT = 3\n\n# Initialize all entries of dp as 0. \ndp = [[0 for i in range(4)] \n\t\tfor i in range(16)] \n\n# Call function to count number of playlist \n# of length T with no two consecutive \n# songs of same genre. \nans = 0\nfor i in range(1, 4): \n\tans = (ans + countplaylist(T, i)) \n\n# Print result. \nprint(ans) \n\n# This code is contributed by mits"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.0
    ],
    "time": 6.6951680183410645,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}