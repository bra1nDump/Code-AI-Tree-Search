{
    "codes": [
        "\nimport sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    songs = []\n    for i in range(n):\n        t, g = map(int, sys.stdin.readline().split())\n        songs.append((t, g))\n    songs.sort()\n    dp = [[0 for j in range(T+1)] for i in range(n)]\n    for i in range(n):\n        for j in range(T+1):\n            if i == 0:\n                if j >= songs[i][0]:\n                    dp[i][j] = 1\n            else:\n                if j >= songs[i][0]:\n                    dp[i][j] = dp[i-1][j] + dp[i-1][j-songs[i][0]]\n                else:\n                    dp[i][j] = dp[i-1][j]\n    print(dp[n-1][T])\n\nif True:\n    main()"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.2037037037037037
    ],
    "time": 6.203292369842529,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false
        ]
    ]
}