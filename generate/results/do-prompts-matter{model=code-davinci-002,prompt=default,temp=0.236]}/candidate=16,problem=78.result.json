{
    "codes": [
        "\nimport sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    songs = []\n    for i in range(n):\n        songs.append(list(map(int, sys.stdin.readline().split())))\n    print(solve(n, T, songs))\n\ndef solve(n, T, songs):\n    # dp[i][j] = number of ways to make a playlist of length j using the first i songs\n    dp = [[0 for i in range(T+1)] for j in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(T+1):\n            if j >= songs[i-1][0]:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-songs[i-1][0]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    # print(dp)\n    # print(dp[n][T])\n    # Now we need to subtract the number of ways to make a playlist of length T using the first n songs such that there are two consecutive songs of the same genre\n    # We can do this by subtracting the number of ways to make a playlist of length T-1 using the first n songs such that there are two consecutive songs of the same genre\n    # This is because we can add a song of length 1 to the end of any playlist of length T-1 such that there are two consecutive songs of the same genre\n    # We can repeat this process until we get to the number of ways to make a playlist of length T-k using the first n songs such that there are two consecutive songs of the same genre\n    # where k is the length of the longest song in the playlist\n    # We can then subtract all of these numbers from the number of ways to make a playlist of length T using the first n songs\n    # print(dp[n][T-1])\n    # print(dp[n][T-2])\n    # print(dp[n][T-3])\n    # print(dp[n][T-4])\n    # print(dp[n][T-5])\n    # print(dp[n][T-6])\n    # print(dp[n][T-7])\n    # print(dp[n][T-8])\n    # print(dp[n][T-9])\n    # print(dp[n][T-10])\n    # print(dp[n][T-11])\n    # print(dp[n][T-12])\n    # print(dp[n][T-13])\n    # print(dp[n][T-14])\n    # print(dp[n][T-15])\n    # print(dp[n][T-16])\n    # print(dp[n][T-17])\n    # print(dp[n][T-18])\n    # print(dp[n][T-19])\n    # print(dp[n][T-20])\n    # print(dp[n][T-21])\n    # print(dp[n][T-22])\n    # print(dp[n][T-23])\n    # print(dp[n][T-24])\n    # print(dp[n][T-25])\n    # print(dp[n][T-26])\n    # print(dp[n][T-27])\n    # print(dp[n][T-28])\n    # print(dp[n][T-29])\n    # print(dp[n][T-30])\n    # print(dp[n][T-31])\n    # print(dp[n][T-32])\n    # print(dp[n][T-33])\n    # print(dp[n][T-34])\n    # print(dp[n][T-35])\n    # print(dp[n][T-36])\n    # print(dp[n][T-37])\n    # print(dp[n][T-38])\n    # print(dp[n][T-39])\n    # print(dp[n][T-40])\n    # print(dp[n][T-41])\n    # print(dp[n][T-42])\n    # print(dp[n][T-43])\n    #"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.0
    ],
    "time": 17.59350609779358,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}