{
    "codes": [
        "\n# Solution\n\n# The idea is to use dynamic programming.\n# Let's define $dp[i][j]$ as the number of ways to play the first $i$ songs and the last song is of genre $j$.\n# Then, we can iterate through all the songs and update the $dp$ array.\n# The answer is the sum of all the values in the last row of the $dp$ array.\n\n# Implementation\n\nn, T = map(int, input().split())\n\nt = []\ng = []\n\nfor i in range(n):\n    ti, gi = map(int, input().split())\n    t.append(ti)\n    g.append(gi)\n\ndp = [[0 for i in range(4)] for j in range(n + 1)]\n\ndp[0][0] = 1\n\nfor i in range(1, n + 1):\n    for j in range(1, 4):\n        if g[i - 1] == j:\n            for k in range(1, 4):\n                if k != j:\n                    dp[i][j] += dp[i - 1][k]\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nans = 0\n\nfor i in range(1, 4):\n    ans += dp[n][i]\n\nprint(ans)"
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 5.436731338500977,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}