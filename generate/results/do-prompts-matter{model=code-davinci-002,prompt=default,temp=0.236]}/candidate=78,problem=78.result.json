{
    "codes": [
        "\n# solution\n\nn, T = map(int, input().split())\n\nt = [0] * n\ng = [0] * n\n\nfor i in range(n):\n    t[i], g[i] = map(int, input().split())\n\ndp = [[[0 for i in range(T + 1)] for j in range(4)] for k in range(n + 1)]\n\ndp[0][0][0] = 1\n\nfor i in range(1, n + 1):\n    for j in range(1, 4):\n        for k in range(T + 1):\n            if k - t[i - 1] >= 0:\n                dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k - t[i - 1]]\n            else:\n                dp[i][j][k] = dp[i - 1][j][k]\n\nprint(dp[n][3][T])"
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 5.786190986633301,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}