{
    "codes": [
        "\nimport sys\n\ndef main():\n    n, t = map(int, sys.stdin.readline().split())\n    songs = []\n    for i in range(n):\n        songs.append(list(map(int, sys.stdin.readline().split())))\n    songs.sort()\n    # print(songs)\n    dp = [[0 for i in range(t + 1)] for j in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(t + 1):\n            if j >= songs[i - 1][0]:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - songs[i - 1][0]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    # print(dp)\n    ans = 0\n    for i in range(1, n + 1):\n        ans += dp[i][t]\n    print(ans)\n\nif True:\n    main()"
    ],
    "rewards": [
        0.36363636363636365
    ],
    "train rewards": [
        0.46296296296296297
    ],
    "time": 5.758949041366577,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            true,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}