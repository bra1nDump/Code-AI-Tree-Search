{
    "codes": [
        "\n# Solution 1\n# This solution is too slow.\n# It is a brute force solution.\n# It will be TLE.\n\n# import sys\n# sys.setrecursionlimit(100000)\n\n# def dfs(t, g, n, T, dp):\n#     if t == T:\n#         return 1\n#     if t > T:\n#         return 0\n#     if dp[t][g] != -1:\n#         return dp[t][g]\n#     ans = 0\n#     for i in range(1, n + 1):\n#         if t + times[i] <= T:\n#             ans += dfs(t + times[i], genres[i], n, T, dp)\n#     dp[t][g] = ans\n#     return ans\n\n# n, T = map(int, input().split())\n# times = [0]\n# genres = [0]\n# for i in range(n):\n#     t, g = map(int, input().split())\n#     times.append(t)\n#     genres.append(g)\n# dp = [[-1] * 4 for _ in range(T + 1)]\n# print(dfs(0, 0, n, T, dp))\n\n\n# Solution 2\n# This solution is too slow.\n# It is a brute force solution.\n# It will be TLE.\n\n# import sys\n# sys.setrecursionlimit(100000)\n\n# def dfs(t, g, n, T, dp):\n#     if t == T:\n#         return 1\n#     if t > T:\n#         return 0\n#     if dp[t][g] != -1:\n#         return dp[t][g]\n#     ans = 0\n#     for i in range(1, n + 1):\n#         if t + times[i] <= T:\n#             ans += dfs(t + times[i], genres[i], n, T, dp)\n#     dp[t][g] = ans\n#     return ans\n\n# n, T = map(int, input().split())\n# times = [0]\n# genres = [0]\n# for i in range(n):\n#     t, g = map(int, input().split())\n#     times.append(t)\n#     genres.append(g)\n# dp = [[-1] * 4 for _ in range(T + 1)]\n# print(dfs(0, 0, n, T, dp))\n\n\n# Solution 3\n# This solution is too slow.\n# It is a brute force solution.\n# It will be TLE.\n\n# import sys\n# sys.setrecursionlimit(100000)\n\n# def dfs(t, g, n, T, dp):\n#     if t == T:\n#         return 1\n#     if t > T:\n#         return 0\n#     if dp[t][g] != -1:\n#         return dp[t][g]\n#     ans = 0\n#     for i in range(1, n + 1):\n#         if t + times[i] <= T:\n#             ans += dfs(t + times[i], genres[i], n, T, dp)\n#     dp[t][g] = ans\n#     return ans\n\n# n, T = map(int, input().split())\n# times = [0]\n# genres = [0]\n# for i in range(n):\n#     t, g = map(int, input().split())\n#     times.append(t)\n#     genres.append(g)\n# dp = [[-1] * 4 for _ in range(T + 1)]\n# print(dfs(0, 0, n, T, dp))\n\n\n# Solution 4\n# This solution is too slow.\n# It is a brute force solution.\n# It will be TLE.\n\n# import sys\n# sys.setrecursionlimit(100000)\n\n# def dfs(t, g, n, T, dp):\n#     if t == T:\n#         return 1\n#     if t > T:\n#         return 0\n#     if dp[t][g] != -1:\n#         return dp[t][g]\n#     ans"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.0
    ],
    "time": 23.02709722518921,
    "sample times": 2,
    "test_rewards": [
        []
    ],
    "train_rewards": [
        []
    ]
}