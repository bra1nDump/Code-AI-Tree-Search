{
    "codes": [
        "\n# Solution 1\ndef solve(n, T, songs):\n    \"\"\"\n    >>> solve(3, 3, [(1, 1), (1, 2), (1, 3)])\n    6\n    >>> solve(3, 3, [(1, 1), (1, 1), (1, 3)])\n    2\n    >>> solve(4, 10, [(5, 3), (2, 1), (3, 2), (5, 1)])\n    10\n    \"\"\"\n    MOD = 10**9 + 7\n    # dp[i][j] is the number of ways to make a playlist of length i with the last song being genre j\n    dp = [[0 for j in range(4)] for i in range(T+1)]\n    dp[0][0] = 1\n    for i in range(1, T+1):\n        for j in range(1, 4):\n            for song in songs:\n                if song[0] <= i and song[1] != j:\n                    dp[i][song[1]] += dp[i-song[0]][j]\n                    dp[i][song[1]] %= MOD\n    return sum(dp[T]) % MOD\n\n# Solution 2\ndef solve(n, T, songs):\n    \"\"\"\n    >>> solve(3, 3, [(1, 1), (1, 2), (1, 3)])\n    6\n    >>> solve(3, 3, [(1, 1), (1, 1), (1, 3)])\n    2\n    >>> solve(4, 10, [(5, 3), (2, 1), (3, 2), (5, 1)])\n    10\n    \"\"\"\n    MOD = 10**9 + 7\n    # dp[i][j] is the number of ways to make a playlist of length i with the last song being genre j\n    dp = [[0 for j in range(4)] for i in range(T+1)]\n    dp[0][0] = 1\n    for i in range(1, T+1):\n        for j in range(1, 4):\n            for song in songs:\n                if song[0] <= i and song[1] != j:\n                    dp[i][song[1]] += dp[i-song[0]][j]\n                    dp[i][song[1]] %= MOD\n    return sum(dp[T]) % MOD\n\nif True:\n    n, T = [int(x) for x in input().split()]\n    songs = []\n    for i in range(n):\n        t, g = [int(x) for x in input().split()]\n        songs.append((t, g))\n    print(solve(n, T, songs))"
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 17.074777126312256,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}