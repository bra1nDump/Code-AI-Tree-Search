{
    "codes": [
        "\nimport sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    songs = []\n    for i in range(n):\n        t, g = map(int, sys.stdin.readline().split())\n        songs.append((t, g))\n    print(solve(n, T, songs))\n\ndef solve(n, T, songs):\n    # dp[i][j] = number of ways to play songs[0:i] with total time j\n    dp = [[0 for j in range(T+1)] for i in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        t, g = songs[i-1]\n        for j in range(T+1):\n            if j >= t:\n                dp[i][j] = dp[i-1][j-t]\n            if i >= 2 and j >= t and songs[i-2][1] != g:\n                dp[i][j] += dp[i-2][j-t]\n    return dp[n][T]\n\nif True:\n    main()"
    ],
    "rewards": [
        0.4
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 8.384019136428833,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}