{
    "codes": [
        "\n\n# Solution\n\nimport sys\n\ndef solve(n, T, songs):\n    \"\"\"\n    >>> solve(3, 3, [(1, 1), (1, 2), (1, 3)])\n    6\n    >>> solve(3, 3, [(1, 1), (1, 1), (1, 3)])\n    2\n    >>> solve(4, 10, [(5, 3), (2, 1), (3, 2), (5, 1)])\n    10\n    \"\"\"\n    # dp[i][j] = number of playlists of length i ending with genre j\n    dp = [[0] * 4 for _ in range(T+1)]\n    dp[0][0] = 1\n    for i in range(1, T+1):\n        for j in range(1, 4):\n            for song in songs:\n                if song[0] == i and song[1] == j:\n                    for k in range(1, 4):\n                        dp[i][j] += dp[i-song[0]][k]\n    return sum(dp[T]) % (10**9 + 7)\n\nif True:\n    n, T = map(int, sys.stdin.readline().split())\n    songs = []\n    for _ in range(n):\n        songs.append(tuple(map(int, sys.stdin.readline().split())))\n    print(solve(n, T, songs))"
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 5.550351142883301,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}