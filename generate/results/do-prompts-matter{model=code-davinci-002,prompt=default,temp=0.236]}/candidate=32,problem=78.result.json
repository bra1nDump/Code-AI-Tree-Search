{
    "codes": [
        "\nimport sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    songs = []\n    for i in range(n):\n        songs.append(list(map(int, sys.stdin.readline().split())))\n\n    # dp[i][j][k] = number of ways to get to time i with last genre j and last song k\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs[l][1] != j\n    # dp[i][j][k] = sum(dp[i-t][j][l]) for all l != k and songs"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.0
    ],
    "time": 15.822306871414185,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}