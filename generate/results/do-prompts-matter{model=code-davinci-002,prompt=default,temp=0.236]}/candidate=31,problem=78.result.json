{
    "codes": [
        "\n# Solution\n\ndef solution(n, T, songs):\n    # dp[i][j] = number of ways to make a playlist of length i with last song of genre j\n    dp = [[0] * 4 for _ in range(T + 1)]\n    dp[0][0] = 1\n    for i in range(1, T + 1):\n        for j in range(1, 4):\n            for song in songs:\n                if song[0] <= i and song[1] == j:\n                    dp[i][j] += dp[i - song[0]][j - 1]\n    return sum(dp[T]) % (10 ** 9 + 7)\n\nn, T = map(int, input().split())\nsongs = []\nfor _ in range(n):\n    songs.append(list(map(int, input().split())))\nprint(solution(n, T, songs))"
    ],
    "rewards": [
        0.4727272727272727
    ],
    "train rewards": [
        0.46296296296296297
    ],
    "time": 3.71675181388855,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}