{
    "codes": [
        "\nimport sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    songs = []\n    for i in range(n):\n        songs.append(list(map(int, sys.stdin.readline().split())))\n    # print(songs)\n    # print(n, T)\n    # print(songs)\n    # print(songs[0][0], songs[0][1])\n    # print(songs[1][0], songs[1][1])\n    # print(songs[2][0], songs[2][1])\n    # print(songs[3][0], songs[3][1])\n    # print(songs[4][0], songs[4][1])\n    # print(songs[5][0], songs[5][1])\n    # print(songs[6][0], songs[6][1])\n    # print(songs[7][0], songs[7][1])\n    # print(songs[8][0], songs[8][1])\n    # print(songs[9][0], songs[9][1])\n    # print(songs[10][0], songs[10][1])\n    # print(songs[11][0], songs[11][1])\n    # print(songs[12][0], songs[12][1])\n    # print(songs[13][0], songs[13][1])\n    # print(songs[14][0], songs[14][1])\n    # print(songs[15][0], songs[15][1])\n    # print(songs[16][0], songs[16][1])\n    # print(songs[17][0], songs[17][1])\n    # print(songs[18][0], songs[18][1])\n    # print(songs[19][0], songs[19][1])\n    # print(songs[20][0], songs[20][1])\n    # print(songs[21][0], songs[21][1])\n    # print(songs[22][0], songs[22][1])\n    # print(songs[23][0], songs[23][1])\n    # print(songs[24][0], songs[24][1])\n    # print(songs[25][0], songs[25][1])\n    # print(songs[26][0], songs[26][1])\n    # print(songs[27][0], songs[27][1])\n    # print(songs[28][0], songs[28][1])\n    # print(songs[29][0], songs[29][1])\n    # print(songs[30][0], songs[30][1])\n    # print(songs[31][0], songs[31][1])\n    # print(songs[32][0], songs[32][1])\n    # print(songs[33][0], songs[33][1])\n    # print(songs[34][0], songs[34][1])\n    # print(songs[35][0], songs[35][1])\n    # print(songs[36][0], songs[36][1])\n    # print(songs[37][0], songs[37][1])\n    # print(songs[38][0], songs[38][1])\n    # print(songs[39][0], songs[39][1])\n    # print(songs[40][0], songs[40][1])\n    # print(songs[41][0], songs[41][1])\n    # print(songs[42][0], songs[42][1])\n    # print(songs[43][0], songs[43][1])\n    # print(songs[44][0], songs[44][1])\n    # print(songs[45][0], songs[45][1])\n    # print(songs[46][0], songs[46][1])\n    # print(songs[47][0], songs[47][1])\n    # print(songs[48][0], songs[48][1])\n    # print(songs[49][0], songs[49][1])\n    # print(songs[50][0], songs[50][1])\n    # print(songs[51][0], songs[51"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.0
    ],
    "time": 21.575153827667236,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}