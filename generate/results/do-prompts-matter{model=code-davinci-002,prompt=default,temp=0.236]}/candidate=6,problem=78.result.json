{
    "codes": [
        "\n#------------------------------------------------------------------------------#\n\ndef solve_easy(n, T, t, g):\n    \"\"\"\n    >>> solve_easy(3, 3, [1, 1, 1], [1, 2, 3])\n    6\n    >>> solve_easy(3, 3, [1, 1, 1], [1, 1, 3])\n    2\n    >>> solve_easy(4, 10, [5, 2, 3, 5], [3, 1, 2, 1])\n    10\n    \"\"\"\n    # dp[i][j][k] = number of ways to make a playlist of length i, ending with\n    #               song j, and the genre of the previous song was k\n    dp = [[[0] * 4 for _ in range(n + 1)] for _ in range(T + 1)]\n    dp[0][0][0] = 1\n    for i in range(1, T + 1):\n        for j in range(1, n + 1):\n            for k in range(1, 4):\n                if i - t[j - 1] < 0:\n                    continue\n                if k == g[j - 1]:\n                    dp[i][j][k] = dp[i - t[j - 1]][j - 1][k]\n                else:\n                    dp[i][j][k] = sum(dp[i - t[j - 1]][j - 1])\n    return sum(dp[T][n])\n\n#------------------------------------------------------------------------------#\n\ndef solve_hard(n, T, t, g):\n    \"\"\"\n    >>> solve_hard(3, 3, [1, 1, 1], [1, 2, 3])\n    6\n    >>> solve_hard(3, 3, [1, 1, 1], [1, 1, 3])\n    2\n    >>> solve_hard(4, 10, [5, 2, 3, 5], [3, 1, 2, 1])\n    10\n    \"\"\"\n    # dp[i][j][k] = number of ways to make a playlist of length i, ending with\n    #               song j, and the genre of the previous song was k\n    dp = [[[0] * 4 for _ in range(n + 1)] for _ in range(T + 1)]\n    dp[0][0][0] = 1\n    for i in range(1, T + 1):\n        for j in range(1, n + 1):\n            for k in range(1, 4):\n                if i - t[j - 1] < 0:\n                    continue\n                if k == g[j - 1]:\n                    dp[i][j][k] = dp[i - t[j - 1]][j - 1][k]\n                else:\n                    dp[i][j][k] = sum(dp[i - t[j - 1]][j - 1])\n    return sum(dp[T][n])\n\n#------------------------------------------------------------------------------#\n\ndef main():\n    n, T = map(int, input().split())\n    t = []\n    g = []\n    for _ in range(n):\n        ti, gi = map(int, input().split())\n        t.append(ti)\n        g.append(gi)\n    print(solve_easy(n, T, t, g))\n\n#------------------------------------------------------------------------------#\n\nif True:\n    main()"
    ],
    "rewards": [
        0.4
    ],
    "train rewards": [
        0.35185185185185186
    ],
    "time": 14.664121150970459,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}