{
    "codes": [
        "\n#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    songs = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    songs.sort()\n    dp = [[0 for _ in range(T+1)] for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(T+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= songs[i][0] and dp[i-1][j-songs[i][0]] != 0:\n                dp[i][j] += dp[i-1][j-songs[i][0]]\n    ans = 0\n    for i in range(T+1):\n        ans += dp[n-1][i]\n    print(ans)\n\nif True:\n    main()"
    ],
    "rewards": [
        0.09090909090909091
    ],
    "train rewards": [
        0.2777777777777778
    ],
    "time": 5.561150074005127,
    "sample times": 2,
    "test_rewards": [
        [
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ]
}