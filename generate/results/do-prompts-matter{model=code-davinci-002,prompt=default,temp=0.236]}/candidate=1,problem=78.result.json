{
    "codes": [
        "\nimport sys\nimport math\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    songs = []\n    for i in range(n):\n        songs.append(list(map(int, sys.stdin.readline().split())))\n    # print(songs)\n\n    # dp[i][j] = number of ways to make a playlist of length j using the first i songs\n    dp = [[0 for j in range(T+1)] for i in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(T+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= songs[i-1][0]:\n                dp[i][j] += dp[i-1][j-songs[i-1][0]]\n    # print(dp)\n\n    # dp2[i][j] = number of ways to make a playlist of length j using the first i songs,\n    # such that the last song is of genre j\n    dp2 = [[0 for j in range(T+1)] for i in range(n+1)]\n    dp2[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(T+1):\n            dp2[i][j] = dp2[i-1][j]\n            if j >= songs[i-1][0] and songs[i-1][1] == j:\n                dp2[i][j] += dp2[i-1][j-songs[i-1][0]]\n    # print(dp2)\n\n    # dp3[i][j] = number of ways to make a playlist of length j using the first i songs,\n    # such that the last song is of genre j and the second to last song is of genre k\n    dp3 = [[[0 for j in range(T+1)] for k in range(4)] for i in range(n+1)]\n    dp3[0][0][0] = 1\n    for i in range(1, n+1):\n        for j in range(T+1):\n            for k in range(4):\n                dp3[i][j][k] = dp3[i-1][j][k]\n                if j >= songs[i-1][0] and songs[i-1][1] == j and k == j:\n                    dp3[i][j][k] += dp3[i-1][j-songs[i-1][0]][k]\n                elif j >= songs[i-1][0] and songs[i-1][1] == j and k != j:\n                    dp3[i][j][k] += dp3[i-1][j-songs[i-1][0]][k]\n    # print(dp3)\n\n    # dp4[i][j] = number of ways to make a playlist of length j using the first i songs,\n    # such that the last song is of genre j and the second to last song is of genre k\n    # and the third to last song is of genre l\n    dp4 = [[[[0 for j in range(T+1)] for k in range(4)] for l in range(4)] for i in range(n+1)]\n    dp4[0][0][0][0] = 1\n    for i in range(1, n+1):\n        for j in range(T+1):\n            for k in range(4):\n                for l in range(4):\n                    dp4[i][j][k][l] = dp4[i-1][j][k][l]\n                    if j >= songs[i-1][0] and songs[i-1][1] == j and k == j and l == j:\n                        dp4[i][j][k][l] += dp4[i-1][j-songs[i-1][0]][k][l]\n                    elif j >= songs[i-1][0] and songs[i-1][1] == j and k != j and l == j:\n                        dp4[i][j][k][l] += dp4"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.0
    ],
    "time": 16.979509115219116,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}