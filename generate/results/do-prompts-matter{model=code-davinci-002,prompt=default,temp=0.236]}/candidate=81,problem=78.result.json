{
    "codes": [
        "\nimport sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    songs = []\n    for i in range(n):\n        songs.append(list(map(int, sys.stdin.readline().split())))\n    # print(songs)\n    # print(songs[0][0])\n    # print(songs[0][1])\n    # print(songs[1][0])\n    # print(songs[1][1])\n    # print(songs[2][0])\n    # print(songs[2][1])\n\n    # print(songs[0][0] + songs[1][0] + songs[2][0])\n\n    # print(songs[0][1] + songs[1][1] + songs[2][1])\n\n    # print(songs[0][0] + songs[1][0] + songs[2][0] == T)\n    # print(songs[0][1] + songs[1][1] + songs[2][1] == T)\n\n    # print(songs[0][0] + songs[1][0] + songs[2][0] == T and songs[0][1] + songs[1][1] + songs[2][1] == T)\n\n    # print(songs[0][0] + songs[1][0] + songs[2][0] == T and songs[0][1] + songs[1][1] + songs[2][1] == T and songs[0][0] + songs[1][0] + songs[2][0] == T)\n\n    # print(songs[0][0] + songs[1][0] + songs[2][0] == T and songs[0][1] + songs[1][1] + songs[2][1] == T and songs[0][0] + songs[1][0] + songs[2][0] == T and songs[0][1] + songs[1][1] + songs[2][1] == T)\n\n    # print(songs[0][0] + songs[1][0] + songs[2][0] == T and songs[0][1] + songs[1][1] + songs[2][1] == T and songs[0][0] + songs[1][0] + songs[2][0] == T and songs[0][1] + songs[1][1] + songs[2][1] == T and songs[0][0] + songs[1][0] + songs[2][0] == T)\n\n    # print(songs[0][0] + songs[1][0] + songs[2][0] == T and songs[0][1] + songs[1][1] + songs[2][1] == T and songs[0][0] + songs[1][0] + songs[2][0] == T and songs[0][1] + songs[1][1] + songs[2][1] == T and songs[0][0] + songs[1][0] + songs[2][0] == T and songs[0][1] + songs[1][1] + songs[2][1] == T)\n\n    # print(songs[0][0] + songs[1][0] + songs[2][0] == T and songs[0][1] + songs[1][1] + songs[2][1] == T and songs[0][0] + songs[1][0] + songs[2][0] == T and songs[0][1] + songs[1][1] + songs[2][1] == T and songs[0][0] + songs[1][0] + songs[2][0] == T and songs[0][1] + songs[1][1] + songs[2][1] == T and songs[0][0] + songs[1][0] + songs[2][0] == T)\n\n    # print(songs[0][0] + songs[1][0] + songs[2][0] == T and songs[0][1] + songs[1][1] + songs[2][1] == T and songs[0][0] + songs[1][0] + songs[2][0] == T and songs[0][1] + songs[1][1] + songs[2][1] == T and songs[0][0] + songs[1][0]"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.0
    ],
    "time": 20.425153017044067,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}