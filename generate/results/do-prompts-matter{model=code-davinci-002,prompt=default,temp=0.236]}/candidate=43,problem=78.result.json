{
    "codes": [
        "\ndef main():\n    n, T = map(int, input().split())\n    songs = []\n    for i in range(n):\n        songs.append(list(map(int, input().split())))\n    songs.sort()\n    # print(songs)\n    dp = [[0 for _ in range(T+1)] for _ in range(n)]\n    for i in range(n):\n        if songs[i][0] <= T:\n            dp[i][songs[i][0]] = 1\n    for i in range(n):\n        for j in range(T+1):\n            if dp[i][j] > 0:\n                for k in range(i+1, n):\n                    if songs[k][0] + j <= T and songs[k][1] != songs[i][1]:\n                        dp[k][j+songs[k][0]] += dp[i][j]\n    # print(dp)\n    ans = 0\n    for i in range(n):\n        ans += dp[i][T]\n    print(ans)\n\nif True:\n    main()"
    ],
    "rewards": [
        0.5272727272727272
    ],
    "train rewards": [
        0.6481481481481481
    ],
    "time": 6.60539174079895,
    "sample times": 2,
    "test_rewards": [
        [
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true
        ]
    ]
}