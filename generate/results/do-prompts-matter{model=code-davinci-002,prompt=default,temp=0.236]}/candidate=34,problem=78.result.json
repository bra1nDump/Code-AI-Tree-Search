{
    "codes": [
        "\n# SOLUTION\n# This is a dynamic programming problem.\n# Let's define $dp[i][j]$ as the number of ways to create a playlist of length $i$ with the last song of genre $j$.\n# We can iterate over all possible lengths of the playlist and all possible genres of the last song.\n# For each of them, we can iterate over all possible genres of the previous song and add the number of ways to create a playlist of length $i - 1$ with the last song of genre $prev$ to $dp[i][j]$.\n# We should also add the number of ways to create a playlist of length $i - 1$ with the last song of genre $j$ to $dp[i][j]$.\n# The answer is the sum of all $dp[T][j]$ for all possible genres $j$.\n# Time complexity: $O(nT)$.\n# Memory complexity: $O(T)$.\n\nMOD = 10**9 + 7\n\ndef solve(n, T, songs):\n    dp = [[0] * 4 for _ in range(T + 1)]\n    for i in range(1, T + 1):\n        for j in range(1, 4):\n            for prev in range(1, 4):\n                if prev != j:\n                    dp[i][j] += dp[i - 1][prev]\n            dp[i][j] += dp[i - 1][j]\n            for t, g in songs:\n                if i >= t and g == j:\n                    dp[i][j] += 1\n    return sum(dp[T]) % MOD\n\nif True:\n    n, T = map(int, input().split())\n    songs = [tuple(map(int, input().split())) for _ in range(n)]\n    print(solve(n, T, songs))"
    ],
    "rewards": [
        0.05454545454545454
    ],
    "train rewards": [
        0.25925925925925924
    ],
    "time": 6.568469047546387,
    "sample times": 2,
    "test_rewards": [
        [
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ]
}