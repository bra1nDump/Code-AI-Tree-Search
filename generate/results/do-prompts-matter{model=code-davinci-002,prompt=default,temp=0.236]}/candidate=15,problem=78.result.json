{
    "codes": [
        "\n# Solution\n\n# This solution is based on dynamic programming.\n# Let dp[i][j][k] be the number of ways to choose a playlist of length i,\n# where the last song has genre j and the second to last song has genre k.\n# Then, we can calculate dp[i][j][k] by summing over all the ways to choose\n# a playlist of length i-1, where the last song has genre k and the second to\n# last song has genre l.\n\n# The base cases are dp[0][0][0] = 1 and dp[0][j][k] = 0 for all other j and k.\n\n# The answer is the sum of dp[T][j][k] over all j and k.\n\n# Time complexity: O(n*T*3^2)\n# Space complexity: O(n*T*3^2)\n\n#!/usr/bin/env python3\n\nn, T = map(int, input().split())\n\n# dp[i][j][k] is the number of ways to choose a playlist of length i,\n# where the last song has genre j and the second to last song has genre k.\ndp = [[[0 for _ in range(4)] for _ in range(4)] for _ in range(T + 1)]\n\n# Base cases\ndp[0][0][0] = 1\n\nfor i in range(1, T + 1):\n    for j in range(1, 4):\n        for k in range(1, 4):\n            for l in range(1, 4):\n                if j == k:\n                    continue\n                dp[i][j][k] += dp[i - 1][k][l]\n\n# The answer is the sum of dp[T][j][k] over all j and k.\nanswer = 0\nfor j in range(1, 4):\n    for k in range(1, 4):\n        answer += dp[T][j][k]\n\nprint(answer)"
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 8.219421863555908,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}