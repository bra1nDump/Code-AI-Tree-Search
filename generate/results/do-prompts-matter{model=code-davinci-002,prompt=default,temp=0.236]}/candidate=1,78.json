{
    "codes": [
        "\nimport sys\n\ndef solve(n, T, songs):\n    # dp[i][j] = number of ways to make playlist of length i with last song of genre j\n    dp = [[0] * 4 for _ in range(T + 1)]\n    dp[0][0] = 1\n    for i in range(1, T + 1):\n        for j in range(1, 4):\n            for song in songs:\n                if song[0] <= i and song[1] != j:\n                    dp[i][j] += dp[i - song[0]][song[1]]\n    return sum(dp[T]) % (10**9 + 7)\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    songs = []\n    for _ in range(n):\n        songs.append(list(map(int, sys.stdin.readline().split())))\n    print(solve(n, T, songs))\n\nif True:\n    main()"
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 5.236795902252197,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}