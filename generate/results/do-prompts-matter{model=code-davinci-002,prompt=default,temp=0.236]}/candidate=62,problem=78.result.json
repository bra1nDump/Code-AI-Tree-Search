{
    "codes": [
        "\n# SOLUTION\n# This is a dynamic programming problem.\n# Let's define a state as a tuple (i, j, k), where\n# i is the index of the song,\n# j is the time left,\n# k is the genre of the last song.\n# We can use a 3D array to store the number of ways to reach a state.\n# The base case is when i = n and j = 0.\n# The recurrence relation is:\n# dp[i][j][k] = dp[i + 1][j][1] + dp[i + 1][j][2] + dp[i + 1][j][3]\n# if t[i] > j\n# dp[i][j][k] = dp[i + 1][j][1] + dp[i + 1][j][2] + dp[i + 1][j][3]\n# if k == g[i]\n# dp[i][j][k] = dp[i + 1][j - t[i]][g[i]]\n# otherwise\n\nMOD = 10**9 + 7\n\ndef solve(n, t, g, T):\n    dp = [[[0 for _ in range(4)] for _ in range(T + 1)] for _ in range(n + 1)]\n    dp[n][0][0] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(T + 1):\n            for k in range(1, 4):\n                if t[i] > j:\n                    dp[i][j][k] = dp[i + 1][j][1] + dp[i + 1][j][2] + dp[i + 1][j][3]\n                elif k == g[i]:\n                    dp[i][j][k] = dp[i + 1][j][1] + dp[i + 1][j][2] + dp[i + 1][j][3]\n                else:\n                    dp[i][j][k] = dp[i + 1][j - t[i]][g[i]]\n                dp[i][j][k] %= MOD\n    return dp[0][T][0]\n\nif True:\n    n, T = map(int, input().split())\n    t = [0] * n\n    g = [0] * n\n    for i in range(n):\n        t[i], g[i] = map(int, input().split())\n    print(solve(n, t, g, T))"
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 12.652468919754028,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}