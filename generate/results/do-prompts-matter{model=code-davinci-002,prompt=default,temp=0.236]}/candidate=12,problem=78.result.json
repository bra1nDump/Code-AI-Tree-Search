{
    "codes": [
        "\ndef main():\n    n, T = map(int, input().split())\n    songs = []\n    for _ in range(n):\n        songs.append(tuple(map(int, input().split())))\n    songs.sort()\n    dp = [[0 for _ in range(T + 1)] for _ in range(n)]\n    for i in range(n):\n        for t in range(T + 1):\n            if i == 0:\n                if t == songs[i][0]:\n                    dp[i][t] = 1\n            else:\n                if t >= songs[i][0]:\n                    dp[i][t] = dp[i - 1][t] + dp[i - 1][t - songs[i][0]]\n                else:\n                    dp[i][t] = dp[i - 1][t]\n    print(dp[n - 1][T])\n\nif True:\n    main()"
    ],
    "rewards": [
        0.36363636363636365
    ],
    "train rewards": [
        0.42592592592592593
    ],
    "time": 3.505207061767578,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}