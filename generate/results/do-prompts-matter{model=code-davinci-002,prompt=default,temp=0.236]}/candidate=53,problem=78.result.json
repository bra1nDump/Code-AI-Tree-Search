{
    "codes": [
        "\nimport sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    songs = []\n    for i in range(n):\n        songs.append(tuple(map(int, sys.stdin.readline().split())))\n    songs.sort()\n    dp = [[[0 for _ in range(T+1)] for _ in range(4)] for _ in range(n+1)]\n    dp[0][0][0] = 1\n    for i in range(n):\n        for j in range(4):\n            for k in range(T+1):\n                if dp[i][j][k] == 0:\n                    continue\n                for l in range(j, 4):\n                    if k + songs[i][0] <= T:\n                        dp[i+1][l][k+songs[i][0]] += dp[i][j][k]\n    print(sum(dp[n][j][T] for j in range(4)))\n\nif True:\n    main()"
    ],
    "rewards": [
        0.4
    ],
    "train rewards": [
        0.35185185185185186
    ],
    "time": 4.051316022872925,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}