{
    "codes": [
        "\n# Solution\n\n# This solution is based on the idea that we can use dynamic programming to solve this problem.\n# We will use a 2D array to store the number of ways to reach a certain time with a certain genre.\n# The first dimension will be the time and the second dimension will be the genre.\n# We will use the following recurrence relation to fill the array:\n# dp[t][g] = dp[t-1][g] + dp[t-1][g-1] + dp[t-1][g+1]\n# The first term is the number of ways to reach time t with genre g without using the current song.\n# The second term is the number of ways to reach time t with genre g using the current song and the previous song having genre g-1.\n# The third term is the number of ways to reach time t with genre g using the current song and the previous song having genre g+1.\n# We will use the above recurrence relation to fill the array.\n# The answer will be the sum of the last row of the array.\n\n# Time complexity: O(n*T)\n# Space complexity: O(T)\n\nMOD = 10**9 + 7\n\ndef solve(n, T, songs):\n    dp = [[0 for _ in range(4)] for _ in range(T+1)]\n    dp[0][0] = 1\n    for t in range(1, T+1):\n        for g in range(1, 4):\n            dp[t][g] = dp[t-1][g]\n            if t-songs[g-1][0] >= 0:\n                dp[t][g] += dp[t-songs[g-1][0]][songs[g-1][1]]\n            if g > 1:\n                dp[t][g] += dp[t-1][g-1]\n            if g < 3:\n                dp[t][g] += dp[t-1][g+1]\n            dp[t][g] %= MOD\n    return sum(dp[T]) % MOD\n\nif True:\n    n, T = map(int, input().split())\n    songs = [[0, 0] for _ in range(n)]\n    for i in range(n):\n        songs[i][0], songs[i][1] = map(int, input().split())\n    print(solve(n, T, songs))"
    ],
    "rewards": [
        0.38181818181818183
    ],
    "train rewards": [
        0.2037037037037037
    ],
    "time": 9.038719892501831,
    "sample times": 2,
    "test_rewards": [
        []
    ],
    "train_rewards": [
        []
    ]
}