{
    "codes": [
        "\n# Solution\n\n# This solution is based on the idea that we can use dynamic programming to solve this problem.\n# We will use a 2D array to store the number of ways to reach a certain time with a certain genre.\n# The first dimension will be the time and the second dimension will be the genre.\n# We will use the following formula to calculate the number of ways to reach a certain time with a certain genre:\n# dp[time][genre] = dp[time - song_time][genre] + dp[time - song_time][genre - 1] + dp[time - song_time][genre + 1]\n# This formula is based on the idea that we can reach a certain time with a certain genre by reaching a time that is\n# song_time less with the same genre or with the genre before or after.\n# We will use a modulo to avoid overflow.\n\n# Time complexity: O(n * T)\n# Space complexity: O(T)\n\ndef solve(n, T, songs):\n    dp = [[0 for _ in range(4)] for _ in range(T + 1)]\n    dp[0][0] = 1\n    for time in range(1, T + 1):\n        for genre in range(1, 4):\n            for song in songs:\n                if time - song[0] >= 0:\n                    dp[time][genre] += dp[time - song[0]][genre]\n                    if genre > 1:\n                        dp[time][genre] += dp[time - song[0]][genre - 1]\n                    if genre < 3:\n                        dp[time][genre] += dp[time - song[0]][genre + 1]\n                    dp[time][genre] %= 1000000007\n    return dp[T][0]\n\nn, T = map(int, input().split())\nsongs = []\nfor _ in range(n):\n    songs.append(list(map(int, input().split())))\nprint(solve(n, T, songs))"
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 8.304248094558716,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}