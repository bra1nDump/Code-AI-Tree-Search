{
    "codes": [
        "\n# Solution\n\n# This solution is based on the idea that we can use dynamic programming to solve this problem.\n# We will use a 2D array to store the number of ways to reach a certain time with a certain genre.\n# The first dimension will be the time and the second dimension will be the genre.\n# We will use the following formula to calculate the number of ways to reach a certain time with a certain genre:\n# dp[time][genre] = dp[time - song_time][genre] + dp[time - song_time][genre - 1] + dp[time - song_time][genre + 1]\n# The first term in the sum is the number of ways to reach the time with the genre if we don't play the song.\n# The second term is the number of ways to reach the time with the genre if we play the song and the genre of the song is genre - 1.\n# The third term is the number of ways to reach the time with the genre if we play the song and the genre of the song is genre + 1.\n# We will use the following base cases:\n# dp[0][0] = 1\n# dp[time][0] = 0 if time > 0\n# dp[0][genre] = 0 if genre > 0\n# We will use the following formula to calculate the answer:\n# answer = dp[T][1] + dp[T][2] + dp[T][3]\n# The answer is the sum of the number of ways to reach the time T with each genre.\n\n# Time complexity: O(n * T)\n# Space complexity: O(T)\n\nMOD = 10**9 + 7\n\ndef solve(n, T, songs):\n    dp = [[0 for _ in range(4)] for _ in range(T + 1)]\n    dp[0][0] = 1\n    for time in range(1, T + 1):\n        for genre in range(1, 4):\n            dp[time][genre] = dp[time][genre - 1]\n            if time >= songs[genre][0]:\n                dp[time][genre] += dp[time - songs[genre][0]][genre]\n                if genre > 1:\n                    dp[time][genre] += dp[time - songs[genre][0]][genre - 1]\n                if genre < 3:\n                    dp[time][genre] += dp[time - songs[genre][0]][genre + 1]\n            dp[time][genre] %= MOD\n    return sum(dp[T]) % MOD\n\nif True:\n    n, T = map(int, input().split())\n    songs = [[0, 0] for _ in range(4)]\n    for _ in range(n):\n        song_time, song_genre = map(int, input().split())\n        songs[song_genre][0] = song_time\n        songs[song_genre][1] += 1\n    print(solve(n, T, songs))"
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 10.231465816497803,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}