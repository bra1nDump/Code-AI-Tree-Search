{"codes": ["# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('YES')\ndef No(): print('NO')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN, M = MAP()\nE = [[] for i in range(N)]\nfor i in range(M):\n\tx, y = MAP()\n\tE[x-1].append(y-1)\n\tE[y-1].append(x-1)\n\nfrom collections import deque\n\nQ = deque()\nQ.append(0)\n\nD = [-INF] * N\nD[0] = 0\n\ndef dfs(v):\n\tfor to in E[v]:\n\t\tif D[to] < 0:\n\t\t\tD[to] = dfs(to)\n\ndfs(0)\n\nif D[0] == INF:\n\tprint('NO')\nelse:\n\tprint('YES')\n"], "rewards": [0.0], "train rewards": [0.0], "time": [14.344203233718872], "sample times": 1}