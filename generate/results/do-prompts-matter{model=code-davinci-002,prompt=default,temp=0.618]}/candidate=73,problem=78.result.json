{
    "codes": [
        "\n\ndef count_playlists(T, songs):\n    \"\"\"\n    This function is based on the idea of dynamic programming.\n\n    Let $dp(i, j)$ be the number of playlists consisting of $i$ songs with the total duration of $j$ minutes.\n    Then $dp(i, j) = \\sum_{k=1}^n dp(i-1, j-t_k)$ if $t_k \\le j$, where $n$ is the total number of songs,\n    and $dp(i, j) = 0$ otherwise.\n\n    $dp(i, j)$ can be precomputed in the table of size $n \\times T$ in $O(n \\cdot T)$.\n\n    Thus, the answer is $dp(n, T)$.\n\n    :param T: integer, the required total duration\n    :param songs: list of lists, each sublist contains the duration of the song and its genre\n    :return: integer, the number of different sequences of songs, the total length of exactly $T$,\n    such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different\n    \"\"\"\n\n    # the constant modulo\n    mod = 10 ** 9 + 7\n\n    # the number of songs\n    n = len(songs)\n\n    # the table dp[i][j] is assigned the number of playlists consisting of i songs with the total duration of j minutes\n    dp = [[0] * (T + 1) for _ in range(n + 1)]\n\n    # the first row is filled with zeros\n    # the first column is filled with zeros except dp[0][0], which is assigned 1\n    for i in range(1, n + 1):\n        for j in range(1, T + 1):\n            dp[i][j] = 0\n            for k in range(i):\n                if songs[k][0] <= j:\n                    dp[i][j] += dp[i - 1][j - songs[k][0]]\n                    dp[i][j] %= mod\n\n    return dp[n][T]\n\n\nif True:\n    # read the number of songs and the required total duration\n    n, T = map(int, input().split())\n\n    # read the duration of the song and its genre for each song\n    songs = []\n    for _ in range(n):\n        t, g = map(int, input().split())\n        songs.append([t, g])\n\n    # print the answer\n    print(count_playlists(T, songs))"
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 10.181579828262329,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}