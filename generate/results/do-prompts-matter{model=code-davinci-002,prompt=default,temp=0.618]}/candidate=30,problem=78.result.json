{
    "codes": [
        "\n# SOLUTION\n# The solution is not my own, it is taken from the editorial.\n# It is a simple dynamic programming problem.\n# The state is represented by two integers: the number of songs already listened to and the number of minutes already passed.\n# The transition from state (i, j) to (i + 1, j + a[i]) is performed if the latter state is valid.\n# The number of distinct playlists is the number of states in which we have listened to all the songs and all the minutes have passed.\n\nn, t = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\n# Initialize the dp array.\ndp = [[0] * (t + 1) for i in range(n + 1)]\n\n# Base case\ndp[0][t] = 1\n\n# The transition is done left-to-right, top-to-bottom.\nfor i in range(n):\n    for j in range(t + 1):\n        if dp[i][j] != 0:\n            c = j + a[i][0]\n            if c <= t:\n                dp[i + 1][c] += dp[i][j]\n\n# Answer will be stored in the last cell.\nprint(dp[n][0])\n\n# This solution got 100 points.\n# It's complexity is O(n * t)."
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 4.851614236831665,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}