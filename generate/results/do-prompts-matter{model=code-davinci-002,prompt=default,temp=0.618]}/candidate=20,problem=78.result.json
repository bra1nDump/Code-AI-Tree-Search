{
    "codes": [
        "\n\nimport sys\nimport math\n\nsys.setrecursionlimit(100000)\n\n# def solve(n, t, songs, mem):\n#     if (n, t) in mem:\n#         return mem[(n, t)]\n#     elif n == 0 and t == 0:\n#         return 1\n#     elif n == 0:\n#         return 0\n#     elif t == 0:\n#         return 1\n#     else:\n#         s = 0\n#         for i in range(1, n + 1):\n#             if t >= songs[i][0]:\n#                 s += solve(i - 1, t - songs[i][0], songs, mem)\n#         mem[(n, t)] = s\n#\n#         return s\n\ndef solve(n, t, songs, mem):\n    if (n, t) in mem:\n        return mem[(n, t)]\n    elif n == 0 and t == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif t == 0:\n        return 1\n    else:\n        s = 0\n        for i in range(1, n + 1):\n            if t >= songs[i][0]:\n                s += solve(i - 1, t - songs[i][0], songs, mem)\n        mem[(n, t)] = s\n\n        return s\n\ndef main():\n    n, t = map(int, input().split())\n    songs = {}\n    for i in range(1, n + 1):\n        s = tuple(map(int, input().split()))\n        songs[i] = s\n    mem = {}\n    s = solve(n, t, songs, mem)\n    print(s)\n\nif True:\n    main()"
    ],
    "rewards": [
        0.45454545454545453
    ],
    "train rewards": [
        0.5925925925925926
    ],
    "time": 6.438191890716553,
    "sample times": 2,
    "test_rewards": [
        [
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true
        ]
    ]
}