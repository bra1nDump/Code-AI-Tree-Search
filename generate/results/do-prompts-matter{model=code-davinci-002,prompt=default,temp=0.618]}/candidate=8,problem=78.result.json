{
    "codes": [
        "\nimport sys\nsys.path.append('../')\n\nimport math\n\n\ndef solve(t, n, songs):\n    \"\"\"\n    Args:\n        t: total time\n        n: number of songs\n        songs: list of songs, each song is represented by a tuple of (time, genre)\n    Returns:\n        int: number of different combinations\n    \"\"\"\n    # dp[i][j][k]: number of different combinations of songs up to i\n    # ending with j and total time is k, j is a song index\n    dp = [[[0 for _ in range(t + 1)] for _ in range(n)] for _ in range(n)]\n\n    for j in range(n):\n        # initialize the first song\n        dp[0][j][songs[j][0]] = 1\n\n    for i in range(1, n):\n        for j in range(n):\n            for k in range(t + 1):\n                dp[i][j][k] = 0\n                if k < songs[j][0]:\n                    continue\n                for l in range(n):\n                    if l == j or songs[l][1] == songs[j][1]:\n                        continue\n                    dp[i][j][k] += dp[i - 1][l][k - songs[j][0]]\n\n    return sum(sum(dp[n - 1][j]) for j in range(n))\n\n\ndef test():\n    assert solve(3, 3, [(1, 1), (1, 2), (1, 3)]) == 6\n    assert solve(3, 3, [(1, 1), (1, 1), (1, 3)]) == 2\n    assert solve(10, 4, [(5, 3), (2, 1), (3, 2), (5, 1)]) == 10\n\n    # from random import randint\n    # for _ in range(10):\n    #     t = randint(1, 225)\n    #     n = randint(1, 15)\n    #     songs = []\n    #     for _ in range(n):\n    #         t_i = randint(1, 15)\n    #         g_i = randint(1, 3)\n    #         songs.append((t_i, g_i))\n    #     print(t, n, songs)\n    #     print(solve(t, n, songs))\n\n\nif True:\n    # test()\n\n    n, t = list(map(int, input().split()))\n    songs = []\n    for _ in range(n):\n        t_i, g_i = list(map(int, input().split()))\n        songs.append((t_i, g_i))\n    print(solve(t, n, songs))"
    ],
    "rewards": [
        0.16363636363636364
    ],
    "train rewards": [
        0.2037037037037037
    ],
    "time": 9.818873167037964,
    "sample times": 2,
    "test_rewards": [
        []
    ],
    "train_rewards": [
        []
    ]
}