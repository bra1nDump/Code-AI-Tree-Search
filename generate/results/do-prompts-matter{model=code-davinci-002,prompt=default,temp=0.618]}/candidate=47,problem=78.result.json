{
    "codes": [
        "\n########## FUNCTIONS ##########\n\n########## MAIN CODE ##########\n\nn, t = [int(x) for x in input().split()]\nT = [t] + [0]*n\nG = [0]*n\nfor i in range(n):\n  t, g = [int(x) for x in input().split()]\n  T[i+1] = t\n  G[i] = g\n\nD = [1] + [0]*t\nfor i in range(n):\n  for j in range(T[i+1], t+1):\n    D[j] = (D[j] + D[j-T[i+1]]) % 10**9 + 7\n  for j in range(t, T[i+1]-1, -1):\n    if G[i] == G[i-1]:\n      D[j] = (D[j] - D[j-T[i+1]] + 10**9 + 7) % 10**9 + 7\n\nprint(D[t])"
    ],
    "rewards": [
        0.01818181818181818
    ],
    "train rewards": [
        0.0
    ],
    "time": 5.283430099487305,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}