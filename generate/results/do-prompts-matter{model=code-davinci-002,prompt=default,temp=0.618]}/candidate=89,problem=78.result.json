{
    "codes": [
        "\n#python3\nimport sys\n\n\ndef read_data():\n    n, t = map(int, input().split())\n    songs = [tuple(map(int, input().split())) for _ in range(n)]\n    return n, t, songs\n\n\ndef get_correct_playlists(n, t, songs):\n    if t > sum(song[0] for song in songs):\n        return 0\n    elif t == sum(song[0] for song in songs):\n        return 1\n\n    if not songs:\n        return 0\n    total = 0\n    for i in range(len(songs)):\n        if songs[i][0] == t:\n            total += 1\n        else:\n            total += get_correct_playlists(n, t - songs[i][0], songs[i + 1:])\n    return total\n\n\ndef main():\n    n, t, songs = read_data()\n    print(get_correct_playlists(n, t, songs) % (10 ** 9 + 7))\n\n\nif True:\n    main()"
    ],
    "rewards": [
        0.45454545454545453
    ],
    "train rewards": [
        0.5925925925925926
    ],
    "time": 3.7636559009552,
    "sample times": 2,
    "test_rewards": [
        [
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true
        ]
    ]
}