{
    "codes": [
        "\nimport sys\n\ndef read_line_of_integers():\n    return [int(x) for x in sys.stdin.readline().strip().split()]\n\ndef read_integer():\n    return int(sys.stdin.readline().strip())\n\ndef read_integer_array():\n    return [int(x) for x in sys.stdin.readline().strip().split()]\n\ndef read_integer_matrix(rows):\n    matrix = []\n    for _ in range(rows):\n        matrix.append(read_integer_array())\n    return matrix\n\n#------------------------------------------------------------------------------#\n\nMODULO = 1000000007\n\ndef main():\n    \"\"\"\n    This is a simple combinatorics problem\n    \"\"\"\n    n, T = read_line_of_integers()\n    songs = read_integer_matrix(n)\n    song_lengths, song_genres = zip(*songs)\n    assert len(song_lengths) == len(song_genres) == n\n    assert all(1 <= genre <= 3 for genre in song_genres)\n    assert all(1 <= length <= 15 for length in song_lengths)\n    assert 1 <= T <= 225\n\n    total_ways = 1\n    for length in range(1, T+1):\n        counter = 0\n        for song_index, song_length in enumerate(song_lengths):\n            if song_length == length:\n                counter += 1\n        total_ways = (total_ways * (counter + 1)) % MODULO\n    print(total_ways)\n\nif True:\n    main()"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.018518518518518517
    ],
    "time": 6.293184995651245,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}