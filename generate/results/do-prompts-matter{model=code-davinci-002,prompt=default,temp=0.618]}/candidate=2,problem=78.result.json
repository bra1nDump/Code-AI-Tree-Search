{
    "codes": [
        "\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\ndef read_int_n_list():\n    return [int(n) for n in sys.stdin.readline().split()]\n\n\ndef main():\n    n, t = read_int_n_list()\n    songs = []\n    for i in range(n):\n        songs.append(read_int_n_list())\n\n    dp = [0] * (t+1)\n    for i in range(1, t+1):\n        for j in range(n):\n            if songs[j][0] == i:\n                dp[i] += 1\n            if songs[j][0] < i:\n                dp[i] += dp[i-songs[j][0]]\n    print(dp[t])\n\n\nif True:\n    main()"
    ],
    "rewards": [
        0.10909090909090909
    ],
    "train rewards": [
        0.35185185185185186
    ],
    "time": 4.402339935302734,
    "sample times": 2,
    "test_rewards": [
        [
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ]
}