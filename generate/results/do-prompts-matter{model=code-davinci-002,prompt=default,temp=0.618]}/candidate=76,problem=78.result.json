{
    "codes": [
        "\n#SOLUTION\n\nn, T = map(int, input().split())\n\nt = []\ng = []\nfor i in range(n):\n    t_i, g_i = map(int, input().split())\n    t.append(t_i)\n    g.append(g_i)\n\ndef modsum(a, b):\n    return ((a % 1000000007) + (b % 1000000007)) % 1000000007\n\ndp = [[0] * (T+1) for i in range(n)]\n\nfor i in range(n):\n    if t[i] <= T:\n        dp[i][t[i]] = 1\n\nfor i in range(1, n):\n    for j in range(1, T+1):\n        if g[i] != g[i-1]:\n            dp[i][j] = modsum(dp[i][j], dp[i-1][j])\n        if j >= t[i]:\n            dp[i][j] = modsum(dp[i][j], dp[i-1][j-t[i]])\n\nprint(dp[n-1][T])"
    ],
    "rewards": [
        0.38181818181818183
    ],
    "train rewards": [
        0.4444444444444444
    ],
    "time": 4.898981809616089,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}