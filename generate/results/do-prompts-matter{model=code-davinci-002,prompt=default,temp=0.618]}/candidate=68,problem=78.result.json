{
    "codes": [
        "\n# dp[i][j] = number of playlists that start with song i and end with song j\n\ndef parse_input():\n    n, T = [int(x) for x in input().split()]\n    songs = []\n    for i in range(n):\n        t, g = [int(x) for x in input().split()]\n        songs.append((t, g))\n    return n, T, songs\n\ndef solve(n, T, songs):\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(i, j):\n                if songs[k][1] != songs[j][1]:\n                    dp[i][j] += dp[i][k]\n    return dp[0][n-1]\n\nif True:\n    n, T, songs = parse_input()\n    print(solve(n, T, songs))"
    ],
    "rewards": [
        0.12727272727272726
    ],
    "train rewards": [
        0.16666666666666666
    ],
    "time": 4.4182939529418945,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}