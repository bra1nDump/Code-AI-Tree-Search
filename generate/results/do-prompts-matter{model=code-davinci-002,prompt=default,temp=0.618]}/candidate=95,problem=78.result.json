{
    "codes": [
        "\ndef solve(n, T, g, t):\n    dp = [ [0]*(T+1) for _ in range(n+1) ]\n    MOD = 1000000007\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, T+1):\n            if j < t[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n                if i > 1 and g[i-1] != g[i-2]:\n                    dp[i][j] += dp[i-1][j-t[i-1]]\n                elif i == 1:\n                    dp[i][j] += dp[i-1][j-t[i-1]]\n    return dp[n][T]\n\nn, T = map(int, input().split())\ng = [0]\nt = []\nfor _ in range(n):\n    t_i, g_i = map(int, input().split())\n    t.append(t_i)\n    g.append(g_i)\nprint(solve(n, T, g, t))"
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.5555555555555556
    ],
    "time": 4.968085050582886,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}