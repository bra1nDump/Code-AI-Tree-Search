{
    "codes": [
        "\n# SOLUTION\nimport sys\n\n# Read the input\nn, T = map(int, sys.stdin.readline().split())\n\n# Initialize the songs\nsongs = []\nfor i in range(n):\n    songs.append(sys.stdin.readline().split())\n\n# Initialize the songs that have the same length as the total time\nsongs_T = []\nfor i in range(n):\n    if int(songs[i][0]) == T:\n        songs_T.append(songs[i][1])\n\n# Initialize the songs that have a length smaller than the total time\nsongs_0 = []\nfor i in range(n):\n    if int(songs[i][0]) < T:\n        songs_0.append(songs[i][1])\n\n# Initialize the number of possible playlists\nplaylists = 0\n\n# If there are songs with the same length as the total time\nif len(songs_T) > 0:\n    # Initialize the number of possible playlists\n    playlists = 1\n    # For each song with the same length as the total time\n    for i in range(len(songs_T)):\n        # Initialize the number of possible playlists\n        playlists_i = 0\n        # For each song with a length smaller than the total time\n        for j in range(len(songs_0)):\n            # If the song has a different genre\n            if int(songs_0[j]) != int(songs_T[i]):\n                playlists_i += 1\n        playlists *= playlists_i\n\n# If there are no songs with the same length as the total time\nelse:\n    # Initialize the number of possible playlists\n    playlists = 1\n    # Initialize the number of songs with a length smaller than the total time\n    songs_0_n = 0\n    # For each song with a length smaller than the total time\n    for i in range(len(songs_0)):\n        # Initialize the number of songs with a length smaller than the total time\n        songs_0_n_i = 0\n        # For each song with a length smaller than the total time\n        for j in range(len(songs_0)):\n            # If the song has a different genre\n            if int(songs_0[i]) != int(songs_0[j]):\n                songs_0_n_i += 1\n        playlists *= songs_0_n_i\n        songs_0_n += 1\n    playlists *= songs_0_n\n\n# Print the number of possible playlists\nprint(playlists % 1000000007)"
    ],
    "rewards": [
        0.10909090909090909
    ],
    "train rewards": [
        0.2037037037037037
    ],
    "time": 12.229719161987305,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}