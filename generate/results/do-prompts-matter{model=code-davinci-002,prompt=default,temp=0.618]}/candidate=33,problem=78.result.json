{
    "codes": [
        "\nimport sys\n\ndef read_data():\n    \"\"\"\n    Reads the data from the file.\n    \"\"\"\n    n, t = map(int, input().strip().split())\n    songs = []\n    for i in range(n):\n        songs.append(list(map(int, input().strip().split())))\n    return n, t, songs\n\n\ndef get_playlists(n, t, songs):\n    \"\"\"\n    Calculates the number of different sequences of songs.\n    \"\"\"\n    # The dynamic programming array.\n    dp = [[[0, 0, 0] for j in range(t + 1)] for i in range(n + 1)]\n\n    # Base cases.\n    for i in range(1, n + 1):\n        for j in range(songs[i - 1][0], t + 1):\n            if i == 1:\n                dp[i][j][songs[i - 1][1] - 1] = 1\n            else:\n                # Calculate the number of playlists which end with the current song.\n                for k in range(songs[i - 1][0], j + 1):\n                    for l in range(3):\n                        if l != songs[i - 1][1] - 1:\n                            dp[i][j][songs[i - 1][1] - 1] += dp[i - 1][k - songs[i - 1][0]][l]\n    # The total number of playlists.\n    return sum(dp[n][t]) % (10**9 + 7)\n\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    n, t, songs = read_data()\n    print(get_playlists(n, t, songs))\n\n\nif True:\n    sys.exit(main())"
    ],
    "rewards": [
        0.2545454545454545
    ],
    "train rewards": [
        0.3333333333333333
    ],
    "time": 7.722140789031982,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}