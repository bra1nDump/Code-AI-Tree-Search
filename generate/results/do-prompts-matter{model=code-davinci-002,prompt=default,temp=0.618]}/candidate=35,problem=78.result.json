{
    "codes": [
        "\nimport sys\n\n# http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\ndef primes(n):\n    \"\"\" Returns  a list of primes < n \"\"\"\n    sieve = [True] * (n/2)\n    for i in range(3,int(n**0.5)+1,2):\n        if sieve[i/2]:\n            sieve[i*i/2::i] = [False] * ((n-i*i-1)/(2*i)+1)\n    return [2] + [2*i+1 for i in range(1,n/2) if sieve[i]]\n\ndef get_divisors(n):\n    divisors = [1]\n    for prime in primes(n):\n        if n % prime == 0:\n            divisors.append(prime)\n    return divisors\n\ndef get_all_divisors(n):\n    divisors = [1]\n    for prime in primes(n):\n        if n % prime == 0:\n            divisors.append(prime)\n            divisors.append(n/prime)\n    return divisors\n\ndef gcd(a, b):\n    \"\"\"Compute the greatest common divisor of a and b\"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\nMOD = 1000000007\n\ndef solve(args):\n    \"\"\"\n    >>> solve([3, 3, 1, 1, 1, 2, 1, 3])\n    6\n\n    >>> solve([3, 3, 1, 1, 1, 1, 1, 3])\n    2\n\n    >>> solve([4, 10, 5, 3, 2, 1, 3, 2, 5, 1])\n    10\n\n    >>> solve([4, 10, 5, 3, 2, 1, 3, 2, 5, 1, 3, 2, 5, 1])\n    10\n\n    >>> solve([4, 10, 5, 3, 2, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1])\n    10\n\n    >>> solve([4, 10, 5, 3, 2, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1])\n    10\n\n    >>> solve([4, 10, 5, 3, 2, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1])\n    10\n\n    >>> solve([4, 10, 5, 3, 2, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1])\n    10\n\n    >>> solve([4, 10, 5, 3, 2, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1])\n    10\n\n    >>> solve([4, 10, 5, 3, 2, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1])\n    10\n\n    >>> solve([5, 10, 5, 3, 2, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1, 3, 2, 5, 1])\n    20\n    \"\"\"\n\n    # index 0: num_songs, 1: total_length, 2: song_length, 3: song_genre\n    num_songs = args[0]\n    total_length = args[1]\n    song_length_genre = args[2:]\n\n    #"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.0
    ],
    "time": 20.128599166870117,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}