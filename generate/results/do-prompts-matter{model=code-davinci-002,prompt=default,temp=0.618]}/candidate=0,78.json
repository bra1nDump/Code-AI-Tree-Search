{
    "codes": [
        "\ndef main():\n    # Read input\n    n, T = [int(x) for x in input().split()]\n    song_durations = []\n    song_genre = []\n    for i in range(n):\n        t, g = [int(x) for x in input().split()]\n        song_durations.append(t)\n        song_genre.append(g)\n    \n    # Build the dp array\n    dp = [0 for i in range(T+1)]\n    dp[0] = 1\n    for i in range(1, T+1):\n        for j in range(n):\n            if i - song_durations[j] >= 0:\n                dp[i] += dp[i - song_durations[j]]\n                \n    # Number of playlists that end on a particular song\n    end_song_counts = [0 for i in range(T+1)]\n    \n    # Count the number of playlists ending on a particular song\n    for i in range(1, T+1):\n        for j in range(n):\n            if i - song_durations[j] >= 0:\n                end_song_counts[i] += dp[i - song_durations[j]]\n                \n    # Count up the number of playlists that are bad\n    bad_playlists = 0\n    for i in range(1, T+1):\n        for j in range(n):\n            if i - song_durations[j] >= 0 and song_genre[j] == song_genre[0]:\n                if i - song_durations[j] == 0:\n                    bad_playlists += 1\n                else:\n                    bad_playlists += end_song_counts[i - song_durations[j]]\n    #print(dp)\n    #print(end_song_counts)\n    #print(bad_playlists)\n    #print(dp[T])\n    print(dp[T] - bad_playlists)\n\nif True:\n    main()"
    ],
    "rewards": [
        0.01818181818181818
    ],
    "train rewards": [
        0.09259259259259259
    ],
    "time": 8.115367889404297,
    "sample times": 2,
    "test_rewards": [
        [
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false
        ]
    ]
}