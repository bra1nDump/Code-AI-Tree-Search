{
    "codes": [
        "\nn, T = map(int, input().split())\n\nsongs = []\nfor _ in range(n):\n    t, g = map(int, input().split())\n    songs.append((t, g))\n\n# dp[i][j] stores the number of different sequences of songs, the total length of exactly j, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\ndp = [[0] * (T + 1) for _ in range(n + 1)]\n\n# Initialize the base cases.\nfor i in range(1, n + 1):\n    for j in range(1, T + 1):\n        if songs[i-1][0] > j:\n            dp[i][j] = 0\n        elif i == 1:\n            dp[i][j] = 1\n        else:\n            dp[i][j] = (dp[i-1][j] + dp[i-1][j-songs[i-1][0]]) % (10**9 + 7)\n\nprint(dp[n][T])"
    ],
    "rewards": [
        0.01818181818181818
    ],
    "train rewards": [
        0.16666666666666666
    ],
    "time": 3.911314010620117,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}