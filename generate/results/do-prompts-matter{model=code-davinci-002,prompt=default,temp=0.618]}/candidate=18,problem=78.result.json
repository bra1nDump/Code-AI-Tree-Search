{
    "codes": [
        "\nimport sys\n\ndef main():\n    n, T = [int(x) for x in input().split()]\n    songs = []\n    for i in range(n):\n        t, g = [int(x) for x in input().split()]\n        songs.append((t, g))\n    songs = sorted(songs, key=lambda x: x[0])\n\n    dp = [0] * (T + 1)\n    dp[0] = 1\n    for i in range(T + 1):\n        for t, g in songs:\n            if t <= i:\n                dp[i] += dp[i - t]\n\n    # print(dp)\n\n    print(dp[T])\n\nif True:\n    main()"
    ],
    "rewards": [
        0.10909090909090909
    ],
    "train rewards": [
        0.35185185185185186
    ],
    "time": 4.125610828399658,
    "sample times": 2,
    "test_rewards": [
        [
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ]
}