{
    "codes": [
        "\nimport sys\n\nimport numpy as np\n\ndef main():\n    \"\"\"\n    This code is based on the idea that every subproblem (i.e. the number of sequences\n    of a certain length that end with a certain set of genres) can be expressed as a\n    sum of previous subproblems. In particular, a subproblem that ends with genres\n    $[i, j, k]$ can be expressed as a sum of subproblems that end with genres $[i, j]$,\n    $[j, k]$, and $[i, k]$. \n    \"\"\"\n    lines = sys.stdin.readlines()\n    n, T = [int(x) for x in lines[0].split()]\n    songs = [tuple(int(x) for x in line.split()) for line in lines[1:]]\n    memo = {}\n    def count_sequences(length, genres):\n        \"\"\"\n        This is a recursive function that counts the number of distinct playlists\n        that have length `length` and end with the genres in `genres`.\n\n        This function is memoized.\n        \"\"\"\n        if length == 0:\n            return 1\n        if genres in memo:\n            return memo[genres]\n        num_sequences = 0\n        for song in songs:\n            if song[1] in genres or song[0] > length:\n                continue\n            updated_genres = list(genres)\n            updated_genres.append(song[1])\n            updated_genres.sort()\n            updated_genres = tuple(updated_genres)\n            num_sequences += count_sequences(length - song[0], updated_genres)\n        memo[genres] = num_sequences\n        return num_sequences\n    return count_sequences(T, tuple([])) % (10**9 + 7)\n\nif True:\n    print(main())"
    ],
    "rewards": [
        0.5636363636363636
    ],
    "train rewards": [
        0.8148148148148148
    ],
    "time": 7.812581777572632,
    "sample times": 2,
    "test_rewards": [
        [
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true
        ]
    ]
}