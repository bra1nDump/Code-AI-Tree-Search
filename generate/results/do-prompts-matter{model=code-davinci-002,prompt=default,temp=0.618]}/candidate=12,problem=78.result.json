{
    "codes": [
        "\nfrom collections import defaultdict\n\nn, T = map(int, input().split())\n\n# T = 225\n# n = 15\n\n# t = [5, 2, 3, 5]\n# g = [3, 1, 2, 1]\n\nt = []\ng = []\n\nfor x in range(n):\n    tt, gg = map(int, input().split())\n    t.append(tt)\n    g.append(gg)\n\n# print(t)\n# print(g)\n\n# create a dictionary of the form:\n# {genre: [list of durations]}\ngenre_durations = defaultdict(list)\nfor i in range(n):\n    genre_durations[g[i]].append(t[i])\n\n# print(genre_durations)\n\n\n# create a dictionary of the form:\n# {genre: [list of durations]}\n# where each list of durations is sorted in ascending order\nfor k, v in genre_durations.items():\n    genre_durations[k] = sorted(v)\n\n# print(genre_durations)\n\n# create a dictionary of the form:\n# {genre: [list of durations]}\n# where each list of durations is sorted in descending order\nfor k, v in genre_durations.items():\n    genre_durations[k] = sorted(v, reverse=True)\n\n# print(genre_durations)\n\n\n# create a dictionary of the form:\n# {genre: [[list of durations], [list of durations]]}\n# where the first list of durations is sorted in ascending order\n# and the second list of durations is sorted in descending order\ngenre_durations_asc_desc = defaultdict(list)\nfor k, v in genre_durations.items():\n    genre_durations_asc_desc[k] = sorted(v), sorted(v, reverse=True)\n\n# print(genre_durations_asc_desc)\n\n\n# create a dictionary of the form:\n# {genre: [list of durations]}\n# where each list of durations is sorted in ascending order\n# and no element of the list is greater than T\ngenre_durations = defaultdict(list)\nfor i in range(n):\n    if t[i] <= T:\n        genre_durations[g[i]].append(t[i])\n\n# print(genre_durations)\n\n\n# create a dictionary of the form:\n# {genre: [list of durations]}\n# where each list of durations is sorted in descending order\n# and no element of the list is greater than T\nfor k, v in genre_durations.items():\n    genre_durations[k] = sorted(v, reverse=True)\n\n# print(genre_durations)\n\n\n# create a dictionary of the form:\n# {genre: [[list of durations], [list of durations]]}\n# where the first list of durations is sorted in ascending order\n# and the second list of durations is sorted in descending order\n# and no element of each list is greater than T\ngenre_durations_asc_desc = defaultdict(list)\nfor k, v in genre_durations.items():\n    genre_durations_asc_desc[k] = sorted(v), sorted(v, reverse=True)\n\n# print(genre_durations_asc_desc)\n\n\n# create a dictionary of the form:\n# {genre: [[list of durations], [list of durations]]}\n# where the first list of durations is sorted in ascending order\n# and the second list of durations is sorted in descending order\n# and no element of each list is greater than T\n# and the first list of durations is not empty\ngenre_durations_asc_desc = defaultdict(list)\nfor k, v in genre_durations.items():\n    if len(v) > 0:\n        genre_durations_asc_desc[k] = sorted(v), sorted(v, reverse=True)\n\n# print(genre_durations_asc_desc)\n\n\n# create a dictionary of the form:\n# {genre: [[list of durations], [list of durations]]}\n# where the first list of durations is sorted in ascending order\n# and the second list of durations is sorted in descending order\n# and no element of each list is greater than T\n# and the first list of durations is not empty"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.0
    ],
    "time": 19.29568386077881,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}