{
    "codes": [
        "\n# Solution 1: DFS with memoization\n#\n# This problem can be solved by a DFS search with memoization.\n#\n# The key observation is that, if we are at the $i$-th song and we have $k$ minutes left, then there are only $3$ possible genres\n# we can choose from.\n#\n# The function dfs(i, k) counts the number of playlists that can be made by choosing the $i$-th song and having $k$ minutes left.\n#\n# The time complexity is O(n * T * 3) = O(225 * 15 * 3) = O(15000).\n\nMOD = 10**9 + 7\n\ndef dfs(i, k):\n    if (i, k) in dp:\n        return dp[(i, k)]\n    elif i == n:\n        return int(k == 0)\n    else:\n        ans = 0\n        for g in range(1, 4):\n            if g == genres[i] and k >= durations[i]:\n                ans += dfs(i + 1, k - durations[i])\n            elif g != genres[i] and k >= durations[i] - 1:\n                ans += dfs(i + 1, k - durations[i] + 1)\n        dp[(i, k)] = ans\n        return ans\n\nn, T = map(int, input().split())\ndurations = []\ngenres = []\nfor i in range(n):\n    t, g = map(int, input().split())\n    durations.append(t)\n    genres.append(g)\ndp = {}\nprint(dfs(0, T))\n\n\n# Solution 2: Dynamic programming\n#\n# The function dp(i, k) counts the number of playlists that can be made by choosing the $i$-th song and having $k$ minutes left.\n#\n# The time complexity is O(n * T * 3) = O(225 * 15 * 3) = O(15000).\n#\n# The space complexity is O(n * T * 3) = O(225 * 15 * 3) = O(15000).\n\nMOD = 10**9 + 7\n\ndef dp(n, T):\n    c = [[[0] * 4 for _ in range(T + 1)] for _ in range(n + 1)]\n    c[0][0][0] = 1\n    for i in range(1, n + 1):\n        for k in range(T + 1):\n            for g in range(1, 4):\n                if g == genres[i - 1]:\n                    if k >= durations[i - 1]:\n                        c[i][k][g] = c[i - 1][k - durations[i - 1]][0]\n                else:\n                    if k >= durations[i - 1] - 1:\n                        c[i][k][g] = c[i - 1][k - durations[i - 1] + 1][0]\n    ans = 0\n    for i in range(1, n + 1):\n        for k in range(T + 1):\n            ans += c[i][k][0]\n    return ans\n\nn, T = map(int, input().split())\ndurations = []\ngenres = []\nfor i in range(n):\n    t, g = map(int, input().split())\n    durations.append(t)\n    genres.append(g)\nprint(dp(n, T))"
    ],
    "rewards": [
        0.0
    ],
    "train rewards": [
        0.0
    ],
    "time": 15.748758792877197,
    "sample times": 2,
    "test_rewards": [
        []
    ],
    "train_rewards": [
        []
    ]
}