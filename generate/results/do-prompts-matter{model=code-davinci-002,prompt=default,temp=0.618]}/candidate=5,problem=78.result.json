{
    "codes": [
        "\n# SOLUTION\n# This problem is similar to the problem of finding the number of subsets with a given sum.\n# The problem is reduced to the problem of finding the number of subsets with a given sum.\n\n# Dynamic programming solution.\n\ndef find_subsets(A, genre, T):\n    # A - list of songs\n    # genre - genre of the last song\n    # T - required total duration\n\n    # Create two arrays, one for the current song and one for the previous song.\n    # Create a two-dimensional array to store the number of subsets with a given sum.\n    # Initialize array elements to zero.\n    N = len(A)\n    cur = [0 for i in range(T+1)]\n    prev = [0 for i in range(T+1)]\n    prev[0] = 1\n\n    for i in range(N):\n        for j in range(T+1):\n            if A[i][1] == genre:\n                if j < A[i][0]:\n                    cur[j] = prev[j]\n                else:\n                    cur[j] = prev[j] + prev[j-A[i][0]]\n            else:\n                cur[j] = prev[j]\n\n        for j in range(T+1):\n            prev[j] = cur[j]\n\n    return cur[T]\n\n# Main function.\nn, T = map(int, input().split())\nA = []\nfor i in range(n):\n    A.append(list(map(int, input().split())))\n\n# Find the number of subsets with a sum of T, considering the last song of each genre.\n# The result is the sum of the results.\nprint(find_subsets(A, 1, T) + find_subsets(A, 2, T) + find_subsets(A, 3, T))"
    ],
    "rewards": [
        0.4727272727272727
    ],
    "train rewards": [
        0.6111111111111112
    ],
    "time": 7.204198122024536,
    "sample times": 2,
    "test_rewards": [
        [
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true
        ]
    ]
}