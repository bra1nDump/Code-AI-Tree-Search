{
    "codes": [
        "\nn, T = [int(x) for x in input().split()]\nsongs = []\nfor i in range(n):\n    t, g = [int(x) for x in input().split()]\n    songs.append((t, g))\n\n# dp[i][j] = number of ways to play i songs with total len j\ndp = [[0 for j in range(T+1)] for i in range(n+1)]\ndp[0][0] = 1\n\nfor i in range(1, n+1):\n    t, g = songs[i-1]\n    for j in range(T+1):\n        if j == 0:\n            dp[i][j] = dp[i-1][j]\n        elif j >= t:\n            if g == 1:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-t]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-t] - dp[i-2][j-t]\nprint(dp[n][T] % (10**9 + 7))"
    ],
    "rewards": [
        0.4
    ],
    "train rewards": [
        0.42592592592592593
    ],
    "time": 5.142235994338989,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}