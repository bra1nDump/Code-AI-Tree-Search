{
    "codes": [
        "\n\ndef main():\n    n, T = map(int, input().split())\n    durations = list()\n    genres = list()\n    for _ in range(n):\n        t, g = map(int, input().split())\n        durations.append(t)\n        genres.append(g)\n\n    # dp[i][j] = number of ways to make playlist of duration i with last song of genre j\n    dp = [ [0 for g in range(4)] for i in range(T+1)]\n    dp[0][0] = 1\n\n    for i in range(T+1):\n        for j in range(1, 4):\n            for k in range(n):\n                if genres[k] != j and durations[k] <= i:\n                    dp[i][j] += dp[i - durations[k]][genres[k]]\n\n    print(sum(dp[T]) % (10**9 + 7))\n\n\nif True:\n    main()"
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 4.443035125732422,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}