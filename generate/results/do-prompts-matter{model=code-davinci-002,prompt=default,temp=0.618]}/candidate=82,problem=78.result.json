{
    "codes": [
        "\nimport itertools\n\n# Main\nn, t = [int(i) for i in input().split()]\nsongs = []\nfor i in range(n):\n    songs.append([int(i) for i in input().split()])\n\n# Get permutations of songs that sum up to t.\npermutations = []\nfor i in range(1, n+1):\n    for perm in itertools.combinations(songs, i):\n        if sum([x[0] for x in perm]) == t:\n            permutations.append(perm)\n\n# Get permutations of songs that sum up to t and don't have consecutive genres.\nvalid_permutations = []\nfor perm in permutations:\n    valid = True\n    for i in range(len(perm)-1):\n        if perm[i][1] == perm[i+1][1]:\n            valid = False\n    if valid:\n        valid_permutations.append(perm)\n\nprint(len(valid_permutations) % (10**9 + 7))"
    ],
    "rewards": [
        0.5272727272727272
    ],
    "train rewards": [
        0.6481481481481481
    ],
    "time": 7.293183088302612,
    "sample times": 2,
    "test_rewards": [
        [
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true
        ]
    ]
}