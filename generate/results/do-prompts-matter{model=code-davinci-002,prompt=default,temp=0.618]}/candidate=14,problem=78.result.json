{
    "codes": [
        "\n# Solution\n# I'm using dynamic programming\n# Let dp[i][j] be the number of ways to make a playlist for the first i songs with total length j\n# Then, dp[i][j] = sum(dp[i - 1][j - k]) where k is the length of each song in the ith song's genre\n# And, dp[0][0] = 1\n# Also, dp[0][j] = 0 for all j > 0\n# And, dp[i][j] = 0 for all j < 0\n\n# This solution is correct but it TLEs.\n# To optimize, we can improve the runtime complexity of the second loop by only iterating over minimum and maximum lengths of songs\n# since the number of ways to make a playlist is 0 if the total length is less than the minimum length of all songs or more than the maximum length of all songs\n\n# The optimized solution passes\n\nimport sys\n\n# sys.stdin = open('in.txt', 'r')  # Comment this line for local development\n\nn, T = map(int, input().split())\nsongs = []\nmin_len = sys.maxsize\nmax_len = 0\nfor i in range(n):\n    t, g = map(int, input().split())\n    min_len = min(min_len, t)\n    max_len = max(max_len, t)\n    songs.append((t, g))\n\nMOD = 10 ** 9 + 7\n\ndp = [[0] * (T + 1) for _ in range(n + 1)]\n\ndp[0][0] = 1\nfor i in range(1, n + 1):\n    for j in range(min_len, T + 1):\n        t, g = songs[i - 1]\n        # add the number of ways to make a playlist for i - 1 songs with total length j - k\n        # where k is the length of each song in the ith song's genre\n        dp[i][j] = sum(dp[i - 1][j - k] for k in range(t, T + 1) if k % g == 0)\n        dp[i][j] %= MOD\n\nprint(dp[n][T])"
    ],
    "rewards": [
        0.05454545454545454
    ],
    "train rewards": [
        0.25925925925925924
    ],
    "time": 9.66136884689331,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            true,
            false,
            false,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false
        ]
    ]
}