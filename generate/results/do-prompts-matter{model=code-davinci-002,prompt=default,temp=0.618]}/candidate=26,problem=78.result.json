{
    "codes": [
        "\n\ndef read_input_data():\n    n_t = input()\n    n, t = int(n_t.split()[0]), int(n_t.split()[1])\n\n    songs = []\n    for _ in range(n):\n        song_data = input()\n        songs.append([int(song_data.split()[0]), int(song_data.split()[1])])\n    return n, t, songs\n\n\ndef solve_easy_version(n, t, songs):\n    \"\"\"\n    Method solves easy version of problem\n    \"\"\"\n    dp = [[0] * (t + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(t + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j - songs[i - 1][0] >= 0:\n                dp[i][j] += dp[i - 1][j - songs[i - 1][0]]\n    return dp[n][t]\n\n\ndef solve_hard_version(n, t, songs):\n    \"\"\"\n    Method solves hard version of problem\n    \"\"\"\n    dp = [[[0] * (t + 1) for _ in range(n + 1)] for _ in range(4)]\n    dp[0][0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(t + 1):\n            dp[songs[i - 1][1]][i][j] = dp[songs[i - 1][1]][i - 1][j]\n            if j - songs[i - 1][0] >= 0:\n                dp[songs[i - 1][1]][i][j] += dp[songs[i - 1][1]][i - 1][j - songs[i - 1][0]]\n            for g in range(1, 4):\n                if g != songs[i - 1][1]:\n                    dp[g][i][j] = dp[g][i - 1][j]\n                    if j - songs[i - 1][0] >= 0:\n                        dp[g][i][j] += dp[g][i - 1][j - songs[i - 1][0]]\n    return sum(dp[g][n][t] for g in range(1, 4))\n\n\ndef main():\n    n, t, songs = read_input_data()\n    print(solve_hard_version(n, t, songs))\n\nif True:\n    main()"
    ],
    "rewards": [
        0.43636363636363634
    ],
    "train rewards": [
        0.3888888888888889
    ],
    "time": 13.04184865951538,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}