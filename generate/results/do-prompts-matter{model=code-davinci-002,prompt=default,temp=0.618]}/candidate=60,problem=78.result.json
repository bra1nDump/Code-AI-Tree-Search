{
    "codes": [
        "\nfrom sys import stdin, stdout\nfrom collections import defaultdict\nfrom fractions import gcd\n\n# def input():\n#     return stdin.readline().strip()\n\n# def print(s):\n#     stdout.write(str(s))\n\ndef solve():\n    n, T = map(int, input().split())\n    genres = defaultdict(list)\n    for i in range(n):\n        t, g = map(int, input().split())\n        genres[g].append(t)\n\n    dp = [0 for _ in range(T + 1)]\n    dp[0] = 1\n\n    for g in genres.values():\n        for t in g:\n            for i in range(T, t - 1, -1):\n                # dp[i] += dp[i - t]\n                dp[i] = (dp[i] + dp[i - t]) % 1000000007\n\n    # print(dp)\n    return dp[T]\n\nprint(solve())"
    ],
    "rewards": [
        0.45454545454545453
    ],
    "train rewards": [
        0.5925925925925926
    ],
    "time": 3.9061131477355957,
    "sample times": 2,
    "test_rewards": [
        [
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true
        ]
    ]
}