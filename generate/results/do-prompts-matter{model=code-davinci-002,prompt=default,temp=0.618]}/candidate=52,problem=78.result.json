{
    "codes": [
        "\nimport sys\nimport os\nimport time\nfrom collections import defaultdict\nfrom functools import lru_cache\n\nclass Problem(object):\n    def __init__(self, s):\n        self.s = s # input string\n        self.n, self.T = self._parse()\n        self.songs = self._parse_songs()\n        #print(self.n, self.T, self.songs)\n\n    def _parse(self):\n        self.s = self.s.split('\\n')\n        n, T = [int(x) for x in self.s[0].split()]\n        return n, T\n\n    def _parse_songs(self):\n        songs = []\n        for i in range(1, self.n+1):\n            t, g = [int(x) for x in self.s[i].split()]\n            songs.append([t, g])\n        return songs\n\n    def solve(self):\n        #print('solving')\n        ans = self._solve()\n        return ans\n\n    def _solve(self):\n        #print('solving')\n        @lru_cache(maxsize=None)\n        def helper(i, T, last_genre):\n            #print(i, T, last_genre)\n            if i == 0:\n                if T == 0:\n                    return 1\n                else:\n                    return 0\n            ans = 0\n            t, g = self.songs[i-1]\n            if T >= t and g != last_genre:\n                ans += helper(i-1, T-t, g)\n            ans += helper(i-1, T, last_genre)\n            return ans\n\n        ans = helper(self.n, self.T, -1)\n        return ans\n\n\ndef main():\n    #sys.stdin = open('test.in', 'r')\n    #sys.stdout = open('test.out', 'w')\n    problem = Problem(sys.stdin.read())\n    ans = problem.solve()\n    print(ans)\n\nif True:\n    main()"
    ],
    "rewards": [
        0.5272727272727272
    ],
    "train rewards": [
        0.6481481481481481
    ],
    "time": 7.629374980926514,
    "sample times": 2,
    "test_rewards": [
        [
            true,
            true,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            true
        ]
    ]
}