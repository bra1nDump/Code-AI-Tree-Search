{
    "codes": [
        "\n#DONE\n\ndef songGenreCount(n, t):\n    \"\"\"\n    n = number of songs\n    t = number of minutes\n\n    \"\"\"\n    #dictionary for song minutes and genre for each song\n    songList = {}\n    for i in range(n):\n        songMinutes, songGenre = map(int, input().split())\n        songList[i+1] = [songMinutes, songGenre]\n    #convert to list\n    songList = list(songList.values())\n    #number of songs within the time range\n    songList = [x for x in songList if x[0] <= t]\n    #sort by minutes\n    songList.sort(key=lambda x: x[0])\n    #print(songList)\n    #total number of sequences\n    numberOfSequences = 0\n    #save all sequences\n    sequences = []\n    #check each song\n    for i in range(len(songList)):\n        #check if song can play\n        if (t-songList[i][0]) >= 0:\n            #subtract the song from time\n            t -= songList[i][0]\n            #check for other songs\n            for j in range(i+1, len(songList)):\n                #check if song can play\n                if (t-songList[j][0]) >= 0:\n                    #subtract the song from time\n                    t -= songList[j][0]\n                    #check for other songs\n                    for k in range(j+1, len(songList)):\n                        #check if song can play\n                        if (t-songList[k][0]) >= 0:\n                            #subtract the song from time\n                            t -= songList[k][0]\n                            #check if genres are different\n                            if (songList[i][1] != songList[j][1] and songList[i][1] != songList[k][1] and songList[j][1] != songList[k][1]):\n                                #add sequence to sequence list\n                                sequences.append([songList[i], songList[j], songList[k]])\n                                #add to number of sequences\n                                numberOfSequences += 1\n                            #return time to check other songs\n                            t += songList[k][0]\n                    #return time to check other songs\n                    t += songList[j][0]\n            #return time to check other songs\n            t += songList[i][0]\n    #print(sequences)\n    #return number of sequences\n    return numberOfSequences\n\n#test\nn, t = map(int, input().split())\nprint(songGenreCount(n, t))"
    ],
    "rewards": [
        0.2545454545454545
    ],
    "train rewards": [
        0.37037037037037035
    ],
    "time": 10.80796194076538,
    "sample times": 2,
    "test_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            true,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true
        ]
    ],
    "train_rewards": [
        [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            false,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false,
            true,
            false,
            false,
            true,
            false,
            false,
            false
        ]
    ]
}